
/*
 * This file was generated by Meeduse animator on Wednesday, March 9, 2022 at 10:31:15 AM CET
 */


MACHINE 
	
	xOwl

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == xOwl;
	

SETS
	
	XOWL;
	AXIOM;
	CLASSEXPRESSION;
	ENTITY;
	ANNOTATION;
	OBJECTPROPERTYEXPRESSION

CONSTANTS
	
	XOWL1,
	AXIOM1,
	ENTITY1,
	AXIOM2,
	ENTITY2,
	AXIOM3,
	CLASSEXPRESSION1,
	CLASSEXPRESSION2,
	AXIOM4,
	CLASSEXPRESSION3,
	CLASSEXPRESSION4,
	AXIOM5,
	CLASSEXPRESSION5,
	CLASSEXPRESSION6,
	AXIOM6,
	CLASSEXPRESSION7,
	CLASSEXPRESSION8,
	AXIOM7,
	ENTITY3,
	AXIOM8,
	ENTITY4,
	AXIOM9,
	CLASSEXPRESSION9,
	CLASSEXPRESSION10

PROPERTIES
	
	XOWL1 : XOWL &
	AXIOM1 : AXIOM &
	ENTITY1 : ENTITY &
	AXIOM2 : AXIOM &
	ENTITY2 : ENTITY &
	AXIOM3 : AXIOM &
	CLASSEXPRESSION1 : CLASSEXPRESSION &
	CLASSEXPRESSION2 : CLASSEXPRESSION &
	AXIOM4 : AXIOM &
	CLASSEXPRESSION3 : CLASSEXPRESSION &
	CLASSEXPRESSION4 : CLASSEXPRESSION &
	AXIOM5 : AXIOM &
	CLASSEXPRESSION5 : CLASSEXPRESSION &
	CLASSEXPRESSION6 : CLASSEXPRESSION &
	AXIOM6 : AXIOM &
	CLASSEXPRESSION7 : CLASSEXPRESSION &
	CLASSEXPRESSION8 : CLASSEXPRESSION &
	AXIOM7 : AXIOM &
	ENTITY3 : ENTITY &
	AXIOM8 : AXIOM &
	ENTITY4 : ENTITY &
	AXIOM9 : AXIOM &
	CLASSEXPRESSION9 : CLASSEXPRESSION &
	CLASSEXPRESSION10 : CLASSEXPRESSION &
	card({CLASSEXPRESSION1,CLASSEXPRESSION2,CLASSEXPRESSION3,CLASSEXPRESSION4,CLASSEXPRESSION5,CLASSEXPRESSION6,CLASSEXPRESSION7,CLASSEXPRESSION8,CLASSEXPRESSION9,CLASSEXPRESSION10}) = 10 &
	card(CLASSEXPRESSION) >= 10 &
	card({ENTITY1,ENTITY2,ENTITY3,ENTITY4}) = 4 &
	card(ENTITY) >= 4 &
	card({XOWL1}) = 1 &
	XOWL /= {} &
	card({AXIOM1,AXIOM2,AXIOM3,AXIOM4,AXIOM5,AXIOM6,AXIOM7,AXIOM8,AXIOM9}) = 9 &
	card(AXIOM) >= 9

ABSTRACT_VARIABLES
	
	XOwl,
	Axiom,
	ClassExpression,
	Entity,
	Annotation,
	ObjectPropertyExpression,
	Assertion,
	Class,
	Individual,
	ClassAxiom,
	Declaration,
	ObjectComplementOf,
	ObjectOneOf,
	ObjectHasValue,
	ObjectProperty,
	ObjectSomeValuesFrom,
	ObjectAllValuesFrom,
	Datatype,
	ClassAssertion,
	EquivalentClasses,
	DisjointUnion,
	DisjointClasses,
	SubClassOf,
	axioms,
	classOfClassExp,
	A_classExpression_classAssertion,
	A_individual_classAssertion,
	axiomAnnotations,
	A_classExpressions_equivalentClasses,
	A_class_disjointUnion,
	A_disjointClassExpressions_disjointUnion,
	disjointClassExp,
	subClassExp,
	superClassExp,
	A_entity_declaration,
	A_classExpression_objectComplementOf,
	A_individuals_objectOneOf,
	A_objectProperty_objectPropertyExpression,
	A_objectPropertyExpression_objectHasValue,
	A_individual_objectHasValue,
	A_objectPropertyExpression_objectSomeValuesFrom,
	A_classExpression_objectSomeValuesFrom,
	A_objectPropertyExpression_objectAllValuesFrom,
	A_classExpression_objectAllValuesFrom,
	xOwl_ontologyIRI,
	xOwl_versionIRI,
	Entity_name,
	Annotation_annotationValue

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	XOwl : FIN(XOWL) &
	Axiom : FIN(AXIOM) &
	ClassExpression : FIN(CLASSEXPRESSION) &
	Entity : FIN(ENTITY) &
	Annotation : FIN(ANNOTATION) &
	ObjectPropertyExpression : FIN(OBJECTPROPERTYEXPRESSION) &
	Assertion <: Axiom &
	Class <: Entity &
	Individual <: Entity &
	ClassAxiom <: Axiom &
	Declaration <: Axiom &
	ObjectComplementOf <: ClassExpression &
	ObjectOneOf <: ClassExpression &
	ObjectHasValue <: ClassExpression &
	ObjectProperty <: Entity &
	ObjectSomeValuesFrom <: ClassExpression &
	ObjectAllValuesFrom <: ClassExpression &
	Datatype <: Entity &
	ClassAssertion <: Assertion &
	EquivalentClasses <: ClassAxiom &
	DisjointUnion <: ClassAxiom &
	DisjointClasses <: ClassAxiom &
	SubClassOf <: ClassAxiom &
	axioms : Axiom +-> XOwl &
	classOfClassExp : ClassExpression +-> Class &
	A_classExpression_classAssertion : ClassAssertion >+> ClassExpression &
	A_individual_classAssertion : ClassAssertion +-> Individual &
	axiomAnnotations : Annotation +-> ClassAxiom &
	A_classExpressions_equivalentClasses : ClassExpression +-> EquivalentClasses &
	A_class_disjointUnion : DisjointUnion +-> Class &
	A_disjointClassExpressions_disjointUnion : ClassExpression +-> DisjointUnion &
	disjointClassExp : ClassExpression +->> DisjointClasses &
	subClassExp : SubClassOf >-> ClassExpression &
	superClassExp : SubClassOf >-> ClassExpression &
	A_entity_declaration : Declaration >+> Entity &
	A_classExpression_objectComplementOf : ObjectComplementOf >+> ClassExpression &
	A_individuals_objectOneOf : ObjectOneOf <-> Individual &
	A_objectProperty_objectPropertyExpression : ObjectPropertyExpression +-> ObjectProperty &
	A_objectPropertyExpression_objectHasValue : ObjectHasValue >+> ObjectPropertyExpression &
	A_individual_objectHasValue : ObjectHasValue +-> Individual &
	A_objectPropertyExpression_objectSomeValuesFrom : ObjectSomeValuesFrom >+> ObjectPropertyExpression &
	A_classExpression_objectSomeValuesFrom : ObjectSomeValuesFrom >+> ClassExpression &
	A_objectPropertyExpression_objectAllValuesFrom : ObjectAllValuesFrom >+> ObjectPropertyExpression &
	A_classExpression_objectAllValuesFrom : ObjectAllValuesFrom >+> ClassExpression &
	xOwl_ontologyIRI : XOwl +-> STRING &
	xOwl_versionIRI : XOwl +-> STRING &
	Entity_name : Entity +-> STRING &
	Annotation_annotationValue : Annotation +-> STRING &
	Declaration /\ Assertion = {} &
	Declaration /\ ClassAxiom = {} &
	Assertion /\ ClassAxiom = {} &
	ObjectHasValue /\ ObjectSomeValuesFrom = {} &
	ObjectHasValue /\ ObjectOneOf = {} &
	ObjectHasValue /\ ObjectAllValuesFrom = {} &
	ObjectHasValue /\ ObjectComplementOf = {} &
	ObjectSomeValuesFrom /\ ObjectOneOf = {} &
	ObjectSomeValuesFrom /\ ObjectAllValuesFrom = {} &
	ObjectSomeValuesFrom /\ ObjectComplementOf = {} &
	ObjectOneOf /\ ObjectAllValuesFrom = {} &
	ObjectOneOf /\ ObjectComplementOf = {} &
	ObjectAllValuesFrom /\ ObjectComplementOf = {} &
	Individual /\ Datatype = {} &
	Individual /\ Class = {} &
	Individual /\ ObjectProperty = {} &
	Datatype /\ Class = {} &
	Datatype /\ ObjectProperty = {} &
	Class /\ ObjectProperty = {} &
	DisjointUnion /\ EquivalentClasses = {} &
	DisjointUnion /\ DisjointClasses = {} &
	DisjointUnion /\ SubClassOf = {} &
	EquivalentClasses /\ DisjointClasses = {} &
	EquivalentClasses /\ SubClassOf = {} &
	DisjointClasses /\ SubClassOf = {} &
	!aDisjointClasses.( aDisjointClasses : ran(disjointClassExp) => card(disjointClassExp~[{aDisjointClasses}]) >= 2)

INITIALISATION
	
	ObjectComplementOf := {} ||
	Entity := {ENTITY1,ENTITY2,ENTITY3,ENTITY4} ||
	EquivalentClasses := {} ||
	DisjointUnion := {} ||
	SubClassOf := {AXIOM3,AXIOM4,AXIOM6,AXIOM9} ||
	ClassAssertion := {} ||
	ObjectAllValuesFrom := {} ||
	Declaration := {AXIOM1,AXIOM2,AXIOM7,AXIOM8} ||
	ObjectPropertyExpression := {} ||
	Individual := {} ||
	ClassAxiom := {AXIOM3,AXIOM4,AXIOM5,AXIOM6,AXIOM9} ||
	ObjectOneOf := {} ||
	DisjointClasses := {AXIOM5} ||
	Datatype := {} ||
	Assertion := {} ||
	Class := {ENTITY1,ENTITY2,ENTITY3,ENTITY4} ||
	ObjectProperty := {} ||
	ClassExpression := {CLASSEXPRESSION1,CLASSEXPRESSION2,CLASSEXPRESSION3,CLASSEXPRESSION4,CLASSEXPRESSION5,CLASSEXPRESSION6,CLASSEXPRESSION7,CLASSEXPRESSION8,CLASSEXPRESSION9,CLASSEXPRESSION10} ||
	Annotation := {} ||
	ObjectHasValue := {} ||
	ObjectSomeValuesFrom := {} ||
	XOwl := {XOWL1} ||
	Axiom := {AXIOM1,AXIOM2,AXIOM3,AXIOM4,AXIOM5,AXIOM6,AXIOM7,AXIOM8,AXIOM9} ||
	Annotation_annotationValue := {} ||
	xOwl_ontologyIRI := {} ||
	xOwl_versionIRI := {} ||
	Entity_name := {(ENTITY1 |-> "Carnivorous_Plant"),(ENTITY2 |-> "Fauna_Flora"),(ENTITY3 |-> "Animal"),(ENTITY4 |-> "Plant")} ||
	A_classExpression_objectSomeValuesFrom := {} ||
	axiomAnnotations := {} ||
	axioms := {(AXIOM1 |-> XOWL1),(AXIOM2 |-> XOWL1),(AXIOM3 |-> XOWL1),(AXIOM4 |-> XOWL1),(AXIOM5 |-> XOWL1),(AXIOM6 |-> XOWL1),(AXIOM7 |-> XOWL1),(AXIOM8 |-> XOWL1),(AXIOM9 |-> XOWL1)} ||
	A_disjointClassExpressions_disjointUnion := {} ||
	disjointClassExp := {(CLASSEXPRESSION5 |-> AXIOM5),(CLASSEXPRESSION6 |-> AXIOM5)} ||
	superClassExp := {(AXIOM3 |-> CLASSEXPRESSION2),(AXIOM4 |-> CLASSEXPRESSION4),(AXIOM6 |-> CLASSEXPRESSION8),(AXIOM9 |-> CLASSEXPRESSION10)} ||
	A_classExpression_objectAllValuesFrom := {} ||
	A_objectPropertyExpression_objectHasValue := {} ||
	A_objectPropertyExpression_objectAllValuesFrom := {} ||
	A_individual_classAssertion := {} ||
	A_objectProperty_objectPropertyExpression := {} ||
	A_entity_declaration := {(AXIOM1 |-> ENTITY1),(AXIOM2 |-> ENTITY2),(AXIOM7 |-> ENTITY3),(AXIOM8 |-> ENTITY4)} ||
	A_individual_objectHasValue := {} ||
	subClassExp := {(AXIOM3 |-> CLASSEXPRESSION1),(AXIOM4 |-> CLASSEXPRESSION3),(AXIOM6 |-> CLASSEXPRESSION7),(AXIOM9 |-> CLASSEXPRESSION9)} ||
	A_individuals_objectOneOf := {} ||
	A_classExpression_objectComplementOf := {} ||
	A_objectPropertyExpression_objectSomeValuesFrom := {} ||
	classOfClassExp := {(CLASSEXPRESSION1 |-> ENTITY3),(CLASSEXPRESSION2 |-> ENTITY2),(CLASSEXPRESSION3 |-> ENTITY1),(CLASSEXPRESSION4 |-> ENTITY4),(CLASSEXPRESSION5 |-> ENTITY4),(CLASSEXPRESSION6 |-> ENTITY3),(CLASSEXPRESSION7 |-> ENTITY4),(CLASSEXPRESSION8 |-> ENTITY2),(CLASSEXPRESSION9 |-> ENTITY1),(CLASSEXPRESSION10 |-> ENTITY3)} ||
	A_classExpressions_equivalentClasses := {} ||
	A_classExpression_classAssertion := {} ||
	A_class_disjointUnion := {}

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	xOwl_NEW(aXOwl) = 
	PRE	aXOwl : XOWL &
		aXOwl /: XOwl
		
	THEN 
		XOwl := XOwl \/ {aXOwl}
	END;

	Axiom_NEW(aAxiom) = 
	PRE	aAxiom : AXIOM &
		aAxiom /: Axiom
		
	THEN 
		Axiom := Axiom \/ {aAxiom}
	END;

	ClassExpression_NEW(aClassExpression) = 
	PRE	aClassExpression : CLASSEXPRESSION &
		aClassExpression /: ClassExpression
		
	THEN 
		ClassExpression := ClassExpression \/ {aClassExpression}
	END;

	Entity_NEW(aEntity) = 
	PRE	aEntity : ENTITY &
		aEntity /: Entity
		
	THEN 
		Entity := Entity \/ {aEntity}
	END;

	Annotation_NEW(aAnnotation) = 
	PRE	aAnnotation : ANNOTATION &
		aAnnotation /: Annotation
		
	THEN 
		Annotation := Annotation \/ {aAnnotation}
	END;

	ObjectPropertyExpression_NEW(aObjectPropertyExpression) = 
	PRE	aObjectPropertyExpression : OBJECTPROPERTYEXPRESSION &
		aObjectPropertyExpression /: ObjectPropertyExpression
		
	THEN 
		ObjectPropertyExpression := ObjectPropertyExpression \/ {aObjectPropertyExpression}
	END;

	Assertion_NEW(aAssertion) = 
	PRE	aAssertion : AXIOM &
		aAssertion /: Axiom
		
	THEN 
		Assertion := Assertion \/ {aAssertion} ||
		Axiom := Axiom \/ {aAssertion}
	END;

	Class_NEW(aClass) = 
	PRE	aClass : ENTITY &
		aClass /: Entity
		
	THEN 
		Class := Class \/ {aClass} ||
		Entity := Entity \/ {aClass}
	END;

	Individual_NEW(aIndividual) = 
	PRE	aIndividual : ENTITY &
		aIndividual /: Entity
		
	THEN 
		Individual := Individual \/ {aIndividual} ||
		Entity := Entity \/ {aIndividual}
	END;

	ClassAxiom_NEW(aClassAxiom) = 
	PRE	aClassAxiom : AXIOM &
		aClassAxiom /: Axiom
		
	THEN 
		ClassAxiom := ClassAxiom \/ {aClassAxiom} ||
		Axiom := Axiom \/ {aClassAxiom}
	END;

	Declaration_NEW(aDeclaration) = 
	PRE	aDeclaration : AXIOM &
		aDeclaration /: Axiom
		
	THEN 
		Declaration := Declaration \/ {aDeclaration} ||
		Axiom := Axiom \/ {aDeclaration}
	END;

	ObjectComplementOf_NEW(aObjectComplementOf) = 
	PRE	aObjectComplementOf : CLASSEXPRESSION &
		aObjectComplementOf /: ClassExpression
		
	THEN 
		ObjectComplementOf := ObjectComplementOf \/ {aObjectComplementOf} ||
		ClassExpression := ClassExpression \/ {aObjectComplementOf}
	END;

	ObjectOneOf_NEW(aObjectOneOf) = 
	PRE	aObjectOneOf : CLASSEXPRESSION &
		aObjectOneOf /: ClassExpression
		
	THEN 
		ObjectOneOf := ObjectOneOf \/ {aObjectOneOf} ||
		ClassExpression := ClassExpression \/ {aObjectOneOf}
	END;

	ObjectHasValue_NEW(aObjectHasValue) = 
	PRE	aObjectHasValue : CLASSEXPRESSION &
		aObjectHasValue /: ClassExpression
		
	THEN 
		ObjectHasValue := ObjectHasValue \/ {aObjectHasValue} ||
		ClassExpression := ClassExpression \/ {aObjectHasValue}
	END;

	ObjectProperty_NEW(aObjectProperty) = 
	PRE	aObjectProperty : ENTITY &
		aObjectProperty /: Entity
		
	THEN 
		ObjectProperty := ObjectProperty \/ {aObjectProperty} ||
		Entity := Entity \/ {aObjectProperty}
	END;

	ObjectSomeValuesFrom_NEW(aObjectSomeValuesFrom) = 
	PRE	aObjectSomeValuesFrom : CLASSEXPRESSION &
		aObjectSomeValuesFrom /: ClassExpression
		
	THEN 
		ObjectSomeValuesFrom := ObjectSomeValuesFrom \/ {aObjectSomeValuesFrom} ||
		ClassExpression := ClassExpression \/ {aObjectSomeValuesFrom}
	END;

	ObjectAllValuesFrom_NEW(aObjectAllValuesFrom) = 
	PRE	aObjectAllValuesFrom : CLASSEXPRESSION &
		aObjectAllValuesFrom /: ClassExpression
		
	THEN 
		ObjectAllValuesFrom := ObjectAllValuesFrom \/ {aObjectAllValuesFrom} ||
		ClassExpression := ClassExpression \/ {aObjectAllValuesFrom}
	END;

	Datatype_NEW(aDatatype) = 
	PRE	aDatatype : ENTITY &
		aDatatype /: Entity
		
	THEN 
		Datatype := Datatype \/ {aDatatype} ||
		Entity := Entity \/ {aDatatype}
	END;

	ClassAssertion_NEW(aClassAssertion) = 
	PRE	aClassAssertion : AXIOM &
		aClassAssertion /: Axiom
		
	THEN 
		ClassAssertion := ClassAssertion \/ {aClassAssertion} ||
		Assertion := Assertion \/ {aClassAssertion} ||
		Axiom := Axiom \/ {aClassAssertion}
	END;

	EquivalentClasses_NEW(aEquivalentClasses) = 
	PRE	aEquivalentClasses : AXIOM &
		aEquivalentClasses /: Axiom
		
	THEN 
		EquivalentClasses := EquivalentClasses \/ {aEquivalentClasses} ||
		Axiom := Axiom \/ {aEquivalentClasses} ||
		ClassAxiom := ClassAxiom \/ {aEquivalentClasses}
	END;

	DisjointUnion_NEW(aDisjointUnion) = 
	PRE	aDisjointUnion : AXIOM &
		aDisjointUnion /: Axiom
		
	THEN 
		DisjointUnion := DisjointUnion \/ {aDisjointUnion} ||
		Axiom := Axiom \/ {aDisjointUnion} ||
		ClassAxiom := ClassAxiom \/ {aDisjointUnion}
	END;

	DisjointClasses_NEW(aDisjointClasses,theClassExpressions) = 
	PRE	aDisjointClasses : AXIOM &
		theClassExpressions : FIN(ClassExpression) &
		aDisjointClasses /: Axiom &
		card(theClassExpressions) >= 2 &
		!added.( added : theClassExpressions => disjointClassExp[{added}] = {})
		
	THEN 
		DisjointClasses := DisjointClasses \/ {aDisjointClasses} ||
		Axiom := Axiom \/ {aDisjointClasses} ||
		ClassAxiom := ClassAxiom \/ {aDisjointClasses} ||
		disjointClassExp := disjointClassExp \/ (theClassExpressions * {aDisjointClasses})
	END;

	SubClassOf_NEW(aSubClassOf,aSubClassExpression,aSuperClassExpression) = 
	PRE	aSubClassOf : AXIOM &
		aSubClassExpression : ClassExpression &
		aSuperClassExpression : ClassExpression &
		aSubClassOf /: Axiom &
		subClassExp~[{aSubClassExpression}] = {} &
		superClassExp~[{aSuperClassExpression}] = {}
		
	THEN 
		SubClassOf := SubClassOf \/ {aSubClassOf} ||
		Axiom := Axiom \/ {aSubClassOf} ||
		ClassAxiom := ClassAxiom \/ {aSubClassOf} ||
		subClassExp := subClassExp \/ {(aSubClassOf |-> aSubClassExpression)} ||
		superClassExp := superClassExp \/ {(aSubClassOf |-> aSuperClassExpression)}
	END;

	xOwl_Free(aXOwl) = 
	PRE	aXOwl : XOwl
		
	THEN 
		XOwl := XOwl - {aXOwl} ||
		axioms := axioms |>> {aXOwl} ||
		xOwl_ontologyIRI := {aXOwl} <<| xOwl_ontologyIRI ||
		xOwl_versionIRI := {aXOwl} <<| xOwl_versionIRI
	END;

	Axiom_Free(aAxiom) = 
	PRE	aAxiom : Axiom &
		aAxiom /: Declaration &
		aAxiom /: Assertion &
		aAxiom /: ClassAxiom
		
	THEN 
		Axiom := Axiom - {aAxiom} ||
		axioms := {aAxiom} <<| axioms
	END;

	ClassExpression_Free(aClassExpression) = 
	PRE	aClassExpression : ClassExpression &
		aClassExpression /: ObjectHasValue &
		aClassExpression /: ObjectSomeValuesFrom &
		aClassExpression /: ObjectOneOf &
		aClassExpression /: ObjectAllValuesFrom &
		aClassExpression /: ObjectComplementOf &
		!aDisjointClasses.( aDisjointClasses : disjointClassExp[{aClassExpression}] => card(disjointClassExp~[{aDisjointClasses}]) >= 3) &
		subClassExp~[{aClassExpression}] = {} &
		superClassExp~[{aClassExpression}] = {}
		
	THEN 
		ClassExpression := ClassExpression - {aClassExpression} ||
		classOfClassExp := {aClassExpression} <<| classOfClassExp ||
		A_classExpression_classAssertion := A_classExpression_classAssertion |>> {aClassExpression} ||
		A_classExpressions_equivalentClasses := {aClassExpression} <<| A_classExpressions_equivalentClasses ||
		A_disjointClassExpressions_disjointUnion := {aClassExpression} <<| A_disjointClassExpressions_disjointUnion ||
		disjointClassExp := {aClassExpression} <<| disjointClassExp ||
		subClassExp := subClassExp |>> {aClassExpression} ||
		superClassExp := superClassExp |>> {aClassExpression} ||
		A_classExpression_objectComplementOf := A_classExpression_objectComplementOf |>> {aClassExpression} ||
		A_classExpression_objectSomeValuesFrom := A_classExpression_objectSomeValuesFrom |>> {aClassExpression} ||
		A_classExpression_objectAllValuesFrom := A_classExpression_objectAllValuesFrom |>> {aClassExpression}
	END;

	Entity_Free(aEntity) = 
	PRE	aEntity : Entity &
		aEntity /: Individual &
		aEntity /: Datatype &
		aEntity /: Class &
		aEntity /: ObjectProperty
		
	THEN 
		Entity := Entity - {aEntity} ||
		A_entity_declaration := A_entity_declaration |>> {aEntity} ||
		Entity_name := {aEntity} <<| Entity_name
	END;

	Annotation_Free(aAnnotation) = 
	PRE	aAnnotation : Annotation
		
	THEN 
		Annotation := Annotation - {aAnnotation} ||
		axiomAnnotations := {aAnnotation} <<| axiomAnnotations ||
		Annotation_annotationValue := {aAnnotation} <<| Annotation_annotationValue
	END;

	ObjectPropertyExpression_Free(aObjectPropertyExpression) = 
	PRE	aObjectPropertyExpression : ObjectPropertyExpression
		
	THEN 
		ObjectPropertyExpression := ObjectPropertyExpression - {aObjectPropertyExpression} ||
		A_objectProperty_objectPropertyExpression := {aObjectPropertyExpression} <<| A_objectProperty_objectPropertyExpression ||
		A_objectPropertyExpression_objectHasValue := A_objectPropertyExpression_objectHasValue |>> {aObjectPropertyExpression} ||
		A_objectPropertyExpression_objectSomeValuesFrom := A_objectPropertyExpression_objectSomeValuesFrom |>> {aObjectPropertyExpression} ||
		A_objectPropertyExpression_objectAllValuesFrom := A_objectPropertyExpression_objectAllValuesFrom |>> {aObjectPropertyExpression}
	END;

	Assertion_Free(aAssertion) = 
	PRE	aAssertion : Assertion &
		aAssertion /: ClassAssertion
		
	THEN 
		Assertion := Assertion - {aAssertion} ||
		Axiom := Axiom - {aAssertion} ||
		axioms := {aAssertion} <<| axioms
	END;

	Class_Free(aClass) = 
	PRE	aClass : Class
		
	THEN 
		Class := Class - {aClass} ||
		Entity := Entity - {aClass} ||
		classOfClassExp := classOfClassExp |>> {aClass} ||
		A_class_disjointUnion := A_class_disjointUnion |>> {aClass} ||
		A_entity_declaration := A_entity_declaration |>> {aClass} ||
		Entity_name := {aClass} <<| Entity_name
	END;

	Individual_Free(aIndividual) = 
	PRE	aIndividual : Individual
		
	THEN 
		Individual := Individual - {aIndividual} ||
		Entity := Entity - {aIndividual} ||
		A_individual_classAssertion := A_individual_classAssertion |>> {aIndividual} ||
		A_entity_declaration := A_entity_declaration |>> {aIndividual} ||
		A_individuals_objectOneOf := A_individuals_objectOneOf |>> {aIndividual} ||
		A_individual_objectHasValue := A_individual_objectHasValue |>> {aIndividual} ||
		Entity_name := {aIndividual} <<| Entity_name
	END;

	ClassAxiom_Free(aClassAxiom) = 
	PRE	aClassAxiom : ClassAxiom &
		aClassAxiom /: DisjointUnion &
		aClassAxiom /: EquivalentClasses &
		aClassAxiom /: DisjointClasses &
		aClassAxiom /: SubClassOf
		
	THEN 
		ClassAxiom := ClassAxiom - {aClassAxiom} ||
		Axiom := Axiom - {aClassAxiom} ||
		axioms := {aClassAxiom} <<| axioms ||
		axiomAnnotations := axiomAnnotations |>> {aClassAxiom}
	END;

	Declaration_Free(aDeclaration) = 
	PRE	aDeclaration : Declaration
		
	THEN 
		Declaration := Declaration - {aDeclaration} ||
		Axiom := Axiom - {aDeclaration} ||
		axioms := {aDeclaration} <<| axioms ||
		A_entity_declaration := {aDeclaration} <<| A_entity_declaration
	END;

	ObjectComplementOf_Free(aObjectComplementOf) = 
	PRE	aObjectComplementOf : ObjectComplementOf &
		!aDisjointClasses.( aDisjointClasses : disjointClassExp[{aObjectComplementOf}] => card(disjointClassExp~[{aDisjointClasses}]) >= 3) &
		subClassExp~[{aObjectComplementOf}] = {} &
		superClassExp~[{aObjectComplementOf}] = {}
		
	THEN 
		ObjectComplementOf := ObjectComplementOf - {aObjectComplementOf} ||
		ClassExpression := ClassExpression - {aObjectComplementOf} ||
		classOfClassExp := {aObjectComplementOf} <<| classOfClassExp ||
		A_classExpression_classAssertion := A_classExpression_classAssertion |>> {aObjectComplementOf} ||
		A_classExpressions_equivalentClasses := {aObjectComplementOf} <<| A_classExpressions_equivalentClasses ||
		A_disjointClassExpressions_disjointUnion := {aObjectComplementOf} <<| A_disjointClassExpressions_disjointUnion ||
		disjointClassExp := {aObjectComplementOf} <<| disjointClassExp ||
		subClassExp := subClassExp |>> {aObjectComplementOf} ||
		superClassExp := superClassExp |>> {aObjectComplementOf} ||
		A_classExpression_objectComplementOf := {aObjectComplementOf} <<| (A_classExpression_objectComplementOf |>> {aObjectComplementOf}) ||
		A_classExpression_objectSomeValuesFrom := A_classExpression_objectSomeValuesFrom |>> {aObjectComplementOf} ||
		A_classExpression_objectAllValuesFrom := A_classExpression_objectAllValuesFrom |>> {aObjectComplementOf}
	END;

	ObjectOneOf_Free(aObjectOneOf) = 
	PRE	aObjectOneOf : ObjectOneOf &
		!aDisjointClasses.( aDisjointClasses : disjointClassExp[{aObjectOneOf}] => card(disjointClassExp~[{aDisjointClasses}]) >= 3) &
		subClassExp~[{aObjectOneOf}] = {} &
		superClassExp~[{aObjectOneOf}] = {}
		
	THEN 
		ObjectOneOf := ObjectOneOf - {aObjectOneOf} ||
		ClassExpression := ClassExpression - {aObjectOneOf} ||
		classOfClassExp := {aObjectOneOf} <<| classOfClassExp ||
		A_classExpression_classAssertion := A_classExpression_classAssertion |>> {aObjectOneOf} ||
		A_classExpressions_equivalentClasses := {aObjectOneOf} <<| A_classExpressions_equivalentClasses ||
		A_disjointClassExpressions_disjointUnion := {aObjectOneOf} <<| A_disjointClassExpressions_disjointUnion ||
		disjointClassExp := {aObjectOneOf} <<| disjointClassExp ||
		subClassExp := subClassExp |>> {aObjectOneOf} ||
		superClassExp := superClassExp |>> {aObjectOneOf} ||
		A_classExpression_objectComplementOf := A_classExpression_objectComplementOf |>> {aObjectOneOf} ||
		A_individuals_objectOneOf := {aObjectOneOf} <<| A_individuals_objectOneOf ||
		A_classExpression_objectSomeValuesFrom := A_classExpression_objectSomeValuesFrom |>> {aObjectOneOf} ||
		A_classExpression_objectAllValuesFrom := A_classExpression_objectAllValuesFrom |>> {aObjectOneOf}
	END;

	ObjectHasValue_Free(aObjectHasValue) = 
	PRE	aObjectHasValue : ObjectHasValue &
		!aDisjointClasses.( aDisjointClasses : disjointClassExp[{aObjectHasValue}] => card(disjointClassExp~[{aDisjointClasses}]) >= 3) &
		subClassExp~[{aObjectHasValue}] = {} &
		superClassExp~[{aObjectHasValue}] = {}
		
	THEN 
		ObjectHasValue := ObjectHasValue - {aObjectHasValue} ||
		ClassExpression := ClassExpression - {aObjectHasValue} ||
		classOfClassExp := {aObjectHasValue} <<| classOfClassExp ||
		A_classExpression_classAssertion := A_classExpression_classAssertion |>> {aObjectHasValue} ||
		A_classExpressions_equivalentClasses := {aObjectHasValue} <<| A_classExpressions_equivalentClasses ||
		A_disjointClassExpressions_disjointUnion := {aObjectHasValue} <<| A_disjointClassExpressions_disjointUnion ||
		disjointClassExp := {aObjectHasValue} <<| disjointClassExp ||
		subClassExp := subClassExp |>> {aObjectHasValue} ||
		superClassExp := superClassExp |>> {aObjectHasValue} ||
		A_classExpression_objectComplementOf := A_classExpression_objectComplementOf |>> {aObjectHasValue} ||
		A_objectPropertyExpression_objectHasValue := {aObjectHasValue} <<| A_objectPropertyExpression_objectHasValue ||
		A_individual_objectHasValue := {aObjectHasValue} <<| A_individual_objectHasValue ||
		A_classExpression_objectSomeValuesFrom := A_classExpression_objectSomeValuesFrom |>> {aObjectHasValue} ||
		A_classExpression_objectAllValuesFrom := A_classExpression_objectAllValuesFrom |>> {aObjectHasValue}
	END;

	ObjectProperty_Free(aObjectProperty) = 
	PRE	aObjectProperty : ObjectProperty
		
	THEN 
		ObjectProperty := ObjectProperty - {aObjectProperty} ||
		Entity := Entity - {aObjectProperty} ||
		A_entity_declaration := A_entity_declaration |>> {aObjectProperty} ||
		A_objectProperty_objectPropertyExpression := A_objectProperty_objectPropertyExpression |>> {aObjectProperty} ||
		Entity_name := {aObjectProperty} <<| Entity_name
	END;

	ObjectSomeValuesFrom_Free(aObjectSomeValuesFrom) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom &
		!aDisjointClasses.( aDisjointClasses : disjointClassExp[{aObjectSomeValuesFrom}] => card(disjointClassExp~[{aDisjointClasses}]) >= 3) &
		subClassExp~[{aObjectSomeValuesFrom}] = {} &
		superClassExp~[{aObjectSomeValuesFrom}] = {}
		
	THEN 
		ObjectSomeValuesFrom := ObjectSomeValuesFrom - {aObjectSomeValuesFrom} ||
		ClassExpression := ClassExpression - {aObjectSomeValuesFrom} ||
		classOfClassExp := {aObjectSomeValuesFrom} <<| classOfClassExp ||
		A_classExpression_classAssertion := A_classExpression_classAssertion |>> {aObjectSomeValuesFrom} ||
		A_classExpressions_equivalentClasses := {aObjectSomeValuesFrom} <<| A_classExpressions_equivalentClasses ||
		A_disjointClassExpressions_disjointUnion := {aObjectSomeValuesFrom} <<| A_disjointClassExpressions_disjointUnion ||
		disjointClassExp := {aObjectSomeValuesFrom} <<| disjointClassExp ||
		subClassExp := subClassExp |>> {aObjectSomeValuesFrom} ||
		superClassExp := superClassExp |>> {aObjectSomeValuesFrom} ||
		A_classExpression_objectComplementOf := A_classExpression_objectComplementOf |>> {aObjectSomeValuesFrom} ||
		A_objectPropertyExpression_objectSomeValuesFrom := {aObjectSomeValuesFrom} <<| A_objectPropertyExpression_objectSomeValuesFrom ||
		A_classExpression_objectSomeValuesFrom := {aObjectSomeValuesFrom} <<| (A_classExpression_objectSomeValuesFrom |>> {aObjectSomeValuesFrom}) ||
		A_classExpression_objectAllValuesFrom := A_classExpression_objectAllValuesFrom |>> {aObjectSomeValuesFrom}
	END;

	ObjectAllValuesFrom_Free(aObjectAllValuesFrom) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom &
		!aDisjointClasses.( aDisjointClasses : disjointClassExp[{aObjectAllValuesFrom}] => card(disjointClassExp~[{aDisjointClasses}]) >= 3) &
		subClassExp~[{aObjectAllValuesFrom}] = {} &
		superClassExp~[{aObjectAllValuesFrom}] = {}
		
	THEN 
		ObjectAllValuesFrom := ObjectAllValuesFrom - {aObjectAllValuesFrom} ||
		ClassExpression := ClassExpression - {aObjectAllValuesFrom} ||
		classOfClassExp := {aObjectAllValuesFrom} <<| classOfClassExp ||
		A_classExpression_classAssertion := A_classExpression_classAssertion |>> {aObjectAllValuesFrom} ||
		A_classExpressions_equivalentClasses := {aObjectAllValuesFrom} <<| A_classExpressions_equivalentClasses ||
		A_disjointClassExpressions_disjointUnion := {aObjectAllValuesFrom} <<| A_disjointClassExpressions_disjointUnion ||
		disjointClassExp := {aObjectAllValuesFrom} <<| disjointClassExp ||
		subClassExp := subClassExp |>> {aObjectAllValuesFrom} ||
		superClassExp := superClassExp |>> {aObjectAllValuesFrom} ||
		A_classExpression_objectComplementOf := A_classExpression_objectComplementOf |>> {aObjectAllValuesFrom} ||
		A_classExpression_objectSomeValuesFrom := A_classExpression_objectSomeValuesFrom |>> {aObjectAllValuesFrom} ||
		A_objectPropertyExpression_objectAllValuesFrom := {aObjectAllValuesFrom} <<| A_objectPropertyExpression_objectAllValuesFrom ||
		A_classExpression_objectAllValuesFrom := {aObjectAllValuesFrom} <<| (A_classExpression_objectAllValuesFrom |>> {aObjectAllValuesFrom})
	END;

	Datatype_Free(aDatatype) = 
	PRE	aDatatype : Datatype
		
	THEN 
		Datatype := Datatype - {aDatatype} ||
		Entity := Entity - {aDatatype} ||
		A_entity_declaration := A_entity_declaration |>> {aDatatype} ||
		Entity_name := {aDatatype} <<| Entity_name
	END;

	ClassAssertion_Free(aClassAssertion) = 
	PRE	aClassAssertion : ClassAssertion
		
	THEN 
		ClassAssertion := ClassAssertion - {aClassAssertion} ||
		Assertion := Assertion - {aClassAssertion} ||
		Axiom := Axiom - {aClassAssertion} ||
		axioms := {aClassAssertion} <<| axioms ||
		A_classExpression_classAssertion := {aClassAssertion} <<| A_classExpression_classAssertion ||
		A_individual_classAssertion := {aClassAssertion} <<| A_individual_classAssertion
	END;

	EquivalentClasses_Free(aEquivalentClasses) = 
	PRE	aEquivalentClasses : EquivalentClasses
		
	THEN 
		EquivalentClasses := EquivalentClasses - {aEquivalentClasses} ||
		Axiom := Axiom - {aEquivalentClasses} ||
		ClassAxiom := ClassAxiom - {aEquivalentClasses} ||
		axioms := {aEquivalentClasses} <<| axioms ||
		axiomAnnotations := axiomAnnotations |>> {aEquivalentClasses} ||
		A_classExpressions_equivalentClasses := A_classExpressions_equivalentClasses |>> {aEquivalentClasses}
	END;

	DisjointUnion_Free(aDisjointUnion) = 
	PRE	aDisjointUnion : DisjointUnion
		
	THEN 
		DisjointUnion := DisjointUnion - {aDisjointUnion} ||
		Axiom := Axiom - {aDisjointUnion} ||
		ClassAxiom := ClassAxiom - {aDisjointUnion} ||
		axioms := {aDisjointUnion} <<| axioms ||
		axiomAnnotations := axiomAnnotations |>> {aDisjointUnion} ||
		A_class_disjointUnion := {aDisjointUnion} <<| A_class_disjointUnion ||
		A_disjointClassExpressions_disjointUnion := A_disjointClassExpressions_disjointUnion |>> {aDisjointUnion}
	END;

	DisjointClasses_Free(aDisjointClasses) = 
	PRE	aDisjointClasses : DisjointClasses
		
	THEN 
		DisjointClasses := DisjointClasses - {aDisjointClasses} ||
		Axiom := Axiom - {aDisjointClasses} ||
		ClassAxiom := ClassAxiom - {aDisjointClasses} ||
		axioms := {aDisjointClasses} <<| axioms ||
		axiomAnnotations := axiomAnnotations |>> {aDisjointClasses} ||
		disjointClassExp := disjointClassExp |>> {aDisjointClasses}
	END;

	SubClassOf_Free(aSubClassOf) = 
	PRE	aSubClassOf : SubClassOf
		
	THEN 
		SubClassOf := SubClassOf - {aSubClassOf} ||
		Axiom := Axiom - {aSubClassOf} ||
		ClassAxiom := ClassAxiom - {aSubClassOf} ||
		axioms := {aSubClassOf} <<| axioms ||
		axiomAnnotations := axiomAnnotations |>> {aSubClassOf} ||
		subClassExp := {aSubClassOf} <<| subClassExp ||
		superClassExp := {aSubClassOf} <<| superClassExp
	END;

	result <-- xOwl_GetAxioms(aXOwl) = 
	PRE	aXOwl : XOwl &
		aXOwl : ran(axioms)
		
	THEN 
		result := axioms~[{aXOwl}]
	END;

	result <-- ClassAssertion_GetClassExpression(aClassAssertion) = 
	PRE	aClassAssertion : ClassAssertion &
		aClassAssertion : dom(A_classExpression_classAssertion)
		
	THEN 
		result := A_classExpression_classAssertion(aClassAssertion)
	END;

	result <-- ClassAssertion_GetIndividual(aClassAssertion) = 
	PRE	aClassAssertion : ClassAssertion &
		aClassAssertion : dom(A_individual_classAssertion)
		
	THEN 
		result := A_individual_classAssertion(aClassAssertion)
	END;

	result <-- ClassExpression_GetClass(aClassExpression) = 
	PRE	aClassExpression : ClassExpression &
		aClassExpression : dom(classOfClassExp)
		
	THEN 
		result := classOfClassExp(aClassExpression)
	END;

	result <-- ClassAxiom_GetAxiomAnnotations(aClassAxiom) = 
	PRE	aClassAxiom : ClassAxiom &
		aClassAxiom : ran(axiomAnnotations)
		
	THEN 
		result := axiomAnnotations~[{aClassAxiom}]
	END;

	result <-- EquivalentClasses_GetClassExpressions(aEquivalentClasses) = 
	PRE	aEquivalentClasses : EquivalentClasses &
		aEquivalentClasses : ran(A_classExpressions_equivalentClasses)
		
	THEN 
		result := A_classExpressions_equivalentClasses~[{aEquivalentClasses}]
	END;

	result <-- DisjointUnion_GetClass(aDisjointUnion) = 
	PRE	aDisjointUnion : DisjointUnion &
		aDisjointUnion : dom(A_class_disjointUnion)
		
	THEN 
		result := A_class_disjointUnion(aDisjointUnion)
	END;

	result <-- DisjointUnion_GetDisjointClassExpressions(aDisjointUnion) = 
	PRE	aDisjointUnion : DisjointUnion &
		aDisjointUnion : ran(A_disjointClassExpressions_disjointUnion)
		
	THEN 
		result := A_disjointClassExpressions_disjointUnion~[{aDisjointUnion}]
	END;

	result <-- DisjointClasses_GetClassExpressions(aDisjointClasses) = 
	PRE	aDisjointClasses : DisjointClasses &
		aDisjointClasses : ran(disjointClassExp)
		
	THEN 
		result := disjointClassExp~[{aDisjointClasses}]
	END;

	result <-- SubClassOf_GetSubClassExpression(aSubClassOf) = 
	PRE	aSubClassOf : SubClassOf &
		aSubClassOf : dom(subClassExp)
		
	THEN 
		result := subClassExp(aSubClassOf)
	END;

	result <-- SubClassOf_GetSuperClassExpression(aSubClassOf) = 
	PRE	aSubClassOf : SubClassOf &
		aSubClassOf : dom(superClassExp)
		
	THEN 
		result := superClassExp(aSubClassOf)
	END;

	result <-- Declaration_GetEntity(aDeclaration) = 
	PRE	aDeclaration : Declaration &
		aDeclaration : dom(A_entity_declaration)
		
	THEN 
		result := A_entity_declaration(aDeclaration)
	END;

	result <-- ObjectComplementOf_GetClassExpression(aObjectComplementOf) = 
	PRE	aObjectComplementOf : ObjectComplementOf &
		aObjectComplementOf : dom(A_classExpression_objectComplementOf)
		
	THEN 
		result := A_classExpression_objectComplementOf(aObjectComplementOf)
	END;

	result <-- ObjectOneOf_GetIndividuals(aObjectOneOf) = 
	PRE	aObjectOneOf : ObjectOneOf &
		aObjectOneOf : dom(A_individuals_objectOneOf)
		
	THEN 
		result := A_individuals_objectOneOf[{aObjectOneOf}]
	END;

	result <-- ObjectHasValue_GetObjectPropertyExpression(aObjectHasValue) = 
	PRE	aObjectHasValue : ObjectHasValue &
		aObjectHasValue : dom(A_objectPropertyExpression_objectHasValue)
		
	THEN 
		result := A_objectPropertyExpression_objectHasValue(aObjectHasValue)
	END;

	result <-- ObjectHasValue_GetIndividual(aObjectHasValue) = 
	PRE	aObjectHasValue : ObjectHasValue &
		aObjectHasValue : dom(A_individual_objectHasValue)
		
	THEN 
		result := A_individual_objectHasValue(aObjectHasValue)
	END;

	result <-- ObjectPropertyExpression_GetObjectProperty(aObjectPropertyExpression) = 
	PRE	aObjectPropertyExpression : ObjectPropertyExpression &
		aObjectPropertyExpression : dom(A_objectProperty_objectPropertyExpression)
		
	THEN 
		result := A_objectProperty_objectPropertyExpression(aObjectPropertyExpression)
	END;

	result <-- ObjectSomeValuesFrom_GetObjectPropertyExpression(aObjectSomeValuesFrom) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom &
		aObjectSomeValuesFrom : dom(A_objectPropertyExpression_objectSomeValuesFrom)
		
	THEN 
		result := A_objectPropertyExpression_objectSomeValuesFrom(aObjectSomeValuesFrom)
	END;

	result <-- ObjectSomeValuesFrom_GetClassExpression(aObjectSomeValuesFrom) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom &
		aObjectSomeValuesFrom : dom(A_classExpression_objectSomeValuesFrom)
		
	THEN 
		result := A_classExpression_objectSomeValuesFrom(aObjectSomeValuesFrom)
	END;

	result <-- ObjectAllValuesFrom_GetObjectPropertyExpression(aObjectAllValuesFrom) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom &
		aObjectAllValuesFrom : dom(A_objectPropertyExpression_objectAllValuesFrom)
		
	THEN 
		result := A_objectPropertyExpression_objectAllValuesFrom(aObjectAllValuesFrom)
	END;

	result <-- ObjectAllValuesFrom_GetClassExpression(aObjectAllValuesFrom) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom &
		aObjectAllValuesFrom : dom(A_classExpression_objectAllValuesFrom)
		
	THEN 
		result := A_classExpression_objectAllValuesFrom(aObjectAllValuesFrom)
	END;

	xOwl_SetAxioms(aXOwl,theAxioms) = 
	PRE	aXOwl : XOwl &
		theAxioms : FIN(Axiom) &
		(theAxioms * {aXOwl}) /<: axioms &
		!added.( added : theAxioms => axioms[{added}] = {})
		
	THEN 
		axioms := (axioms |>> {aXOwl}) \/ (theAxioms * {aXOwl})
	END;

	ClassAssertion_SetClassExpression(aClassAssertion,aClassExpression) = 
	PRE	aClassAssertion : ClassAssertion &
		aClassExpression : ClassExpression &
		{(aClassAssertion |-> aClassExpression)} /<: A_classExpression_classAssertion &
		A_classExpression_classAssertion~[{aClassExpression}] = {}
		
	THEN 
		A_classExpression_classAssertion := ({aClassAssertion} <<| A_classExpression_classAssertion) \/ {(aClassAssertion |-> aClassExpression)}
	END;

	ClassAssertion_SetIndividual(aClassAssertion,aIndividual) = 
	PRE	aClassAssertion : ClassAssertion &
		aIndividual : Individual &
		{(aClassAssertion |-> aIndividual)} /<: A_individual_classAssertion
		
	THEN 
		A_individual_classAssertion := ({aClassAssertion} <<| A_individual_classAssertion) \/ {(aClassAssertion |-> aIndividual)}
	END;

	ClassExpression_SetClass(aClassExpression,aClass) = 
	PRE	aClassExpression : ClassExpression &
		aClass : Class &
		{(aClassExpression |-> aClass)} /<: classOfClassExp
		
	THEN 
		classOfClassExp := ({aClassExpression} <<| classOfClassExp) \/ {(aClassExpression |-> aClass)}
	END;

	ClassAxiom_SetAxiomAnnotations(aClassAxiom,theAxiomAnnotations) = 
	PRE	aClassAxiom : ClassAxiom &
		theAxiomAnnotations : FIN(Annotation) &
		(theAxiomAnnotations * {aClassAxiom}) /<: axiomAnnotations &
		!added.( added : theAxiomAnnotations => axiomAnnotations[{added}] = {})
		
	THEN 
		axiomAnnotations := (axiomAnnotations |>> {aClassAxiom}) \/ (theAxiomAnnotations * {aClassAxiom})
	END;

	EquivalentClasses_SetClassExpressions(aEquivalentClasses,theClassExpressions) = 
	PRE	aEquivalentClasses : EquivalentClasses &
		theClassExpressions : FIN(ClassExpression) &
		(theClassExpressions * {aEquivalentClasses}) /<: A_classExpressions_equivalentClasses &
		!added.( added : theClassExpressions => A_classExpressions_equivalentClasses[{added}] = {})
		
	THEN 
		A_classExpressions_equivalentClasses := (A_classExpressions_equivalentClasses |>> {aEquivalentClasses}) \/ (theClassExpressions * {aEquivalentClasses})
	END;

	DisjointUnion_SetClass(aDisjointUnion,aClass) = 
	PRE	aDisjointUnion : DisjointUnion &
		aClass : Class &
		{(aDisjointUnion |-> aClass)} /<: A_class_disjointUnion
		
	THEN 
		A_class_disjointUnion := ({aDisjointUnion} <<| A_class_disjointUnion) \/ {(aDisjointUnion |-> aClass)}
	END;

	DisjointUnion_SetDisjointClassExpressions(aDisjointUnion,theDisjointClassExpressions) = 
	PRE	aDisjointUnion : DisjointUnion &
		theDisjointClassExpressions : FIN(ClassExpression) &
		(theDisjointClassExpressions * {aDisjointUnion}) /<: A_disjointClassExpressions_disjointUnion &
		!added.( added : theDisjointClassExpressions => A_disjointClassExpressions_disjointUnion[{added}] = {})
		
	THEN 
		A_disjointClassExpressions_disjointUnion := (A_disjointClassExpressions_disjointUnion |>> {aDisjointUnion}) \/ (theDisjointClassExpressions * {aDisjointUnion})
	END;

	DisjointClasses_SetClassExpressions(aDisjointClasses,theClassExpressions) = 
	PRE	aDisjointClasses : DisjointClasses &
		theClassExpressions : FIN(ClassExpression) &
		(theClassExpressions * {aDisjointClasses}) /<: disjointClassExp &
		card(theClassExpressions) >= 2 &
		!added.( added : theClassExpressions => disjointClassExp[{added}] = {})
		
	THEN 
		disjointClassExp := (disjointClassExp |>> {aDisjointClasses}) \/ (theClassExpressions * {aDisjointClasses})
	END;

	SubClassOf_SetSubClassExpression(aSubClassOf,aSubClassExpression) = 
	PRE	aSubClassOf : SubClassOf &
		aSubClassExpression : ClassExpression &
		{(aSubClassOf |-> aSubClassExpression)} /<: subClassExp &
		subClassExp~[{aSubClassExpression}] = {}
		
	THEN 
		subClassExp := ({aSubClassOf} <<| subClassExp) \/ {(aSubClassOf |-> aSubClassExpression)}
	END;

	SubClassOf_SetSuperClassExpression(aSubClassOf,aSuperClassExpression) = 
	PRE	aSubClassOf : SubClassOf &
		aSuperClassExpression : ClassExpression &
		{(aSubClassOf |-> aSuperClassExpression)} /<: superClassExp &
		superClassExp~[{aSuperClassExpression}] = {}
		
	THEN 
		superClassExp := ({aSubClassOf} <<| superClassExp) \/ {(aSubClassOf |-> aSuperClassExpression)}
	END;

	Declaration_SetEntity(aDeclaration,aEntity) = 
	PRE	aDeclaration : Declaration &
		aEntity : Entity &
		{(aDeclaration |-> aEntity)} /<: A_entity_declaration &
		A_entity_declaration~[{aEntity}] = {}
		
	THEN 
		A_entity_declaration := ({aDeclaration} <<| A_entity_declaration) \/ {(aDeclaration |-> aEntity)}
	END;

	ObjectComplementOf_SetClassExpression(aObjectComplementOf,aClassExpression) = 
	PRE	aObjectComplementOf : ObjectComplementOf &
		aClassExpression : ClassExpression &
		{(aObjectComplementOf |-> aClassExpression)} /<: A_classExpression_objectComplementOf &
		A_classExpression_objectComplementOf~[{aClassExpression}] = {}
		
	THEN 
		A_classExpression_objectComplementOf := ({aObjectComplementOf} <<| A_classExpression_objectComplementOf) \/ {(aObjectComplementOf |-> aClassExpression)}
	END;

	ObjectOneOf_SetIndividuals(aObjectOneOf,theIndividuals) = 
	PRE	aObjectOneOf : ObjectOneOf &
		theIndividuals : FIN(Individual) &
		({aObjectOneOf} * theIndividuals) /<: A_individuals_objectOneOf
		
	THEN 
		A_individuals_objectOneOf := ({aObjectOneOf} <<| A_individuals_objectOneOf) \/ ({aObjectOneOf} * theIndividuals)
	END;

	ObjectHasValue_SetObjectPropertyExpression(aObjectHasValue,aObjectPropertyExpression) = 
	PRE	aObjectHasValue : ObjectHasValue &
		aObjectPropertyExpression : ObjectPropertyExpression &
		{(aObjectHasValue |-> aObjectPropertyExpression)} /<: A_objectPropertyExpression_objectHasValue &
		A_objectPropertyExpression_objectHasValue~[{aObjectPropertyExpression}] = {}
		
	THEN 
		A_objectPropertyExpression_objectHasValue := ({aObjectHasValue} <<| A_objectPropertyExpression_objectHasValue) \/ {(aObjectHasValue |-> aObjectPropertyExpression)}
	END;

	ObjectHasValue_SetIndividual(aObjectHasValue,aIndividual) = 
	PRE	aObjectHasValue : ObjectHasValue &
		aIndividual : Individual &
		{(aObjectHasValue |-> aIndividual)} /<: A_individual_objectHasValue
		
	THEN 
		A_individual_objectHasValue := ({aObjectHasValue} <<| A_individual_objectHasValue) \/ {(aObjectHasValue |-> aIndividual)}
	END;

	ObjectPropertyExpression_SetObjectProperty(aObjectPropertyExpression,aObjectProperty) = 
	PRE	aObjectPropertyExpression : ObjectPropertyExpression &
		aObjectProperty : ObjectProperty &
		{(aObjectPropertyExpression |-> aObjectProperty)} /<: A_objectProperty_objectPropertyExpression
		
	THEN 
		A_objectProperty_objectPropertyExpression := ({aObjectPropertyExpression} <<| A_objectProperty_objectPropertyExpression) \/ {(aObjectPropertyExpression |-> aObjectProperty)}
	END;

	ObjectSomeValuesFrom_SetObjectPropertyExpression(aObjectSomeValuesFrom,aObjectPropertyExpression) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom &
		aObjectPropertyExpression : ObjectPropertyExpression &
		{(aObjectSomeValuesFrom |-> aObjectPropertyExpression)} /<: A_objectPropertyExpression_objectSomeValuesFrom &
		A_objectPropertyExpression_objectSomeValuesFrom~[{aObjectPropertyExpression}] = {}
		
	THEN 
		A_objectPropertyExpression_objectSomeValuesFrom := ({aObjectSomeValuesFrom} <<| A_objectPropertyExpression_objectSomeValuesFrom) \/ {(aObjectSomeValuesFrom |-> aObjectPropertyExpression)}
	END;

	ObjectSomeValuesFrom_SetClassExpression(aObjectSomeValuesFrom,aClassExpression) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom &
		aClassExpression : ClassExpression &
		{(aObjectSomeValuesFrom |-> aClassExpression)} /<: A_classExpression_objectSomeValuesFrom &
		A_classExpression_objectSomeValuesFrom~[{aClassExpression}] = {}
		
	THEN 
		A_classExpression_objectSomeValuesFrom := ({aObjectSomeValuesFrom} <<| A_classExpression_objectSomeValuesFrom) \/ {(aObjectSomeValuesFrom |-> aClassExpression)}
	END;

	ObjectAllValuesFrom_SetObjectPropertyExpression(aObjectAllValuesFrom,aObjectPropertyExpression) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom &
		aObjectPropertyExpression : ObjectPropertyExpression &
		{(aObjectAllValuesFrom |-> aObjectPropertyExpression)} /<: A_objectPropertyExpression_objectAllValuesFrom &
		A_objectPropertyExpression_objectAllValuesFrom~[{aObjectPropertyExpression}] = {}
		
	THEN 
		A_objectPropertyExpression_objectAllValuesFrom := ({aObjectAllValuesFrom} <<| A_objectPropertyExpression_objectAllValuesFrom) \/ {(aObjectAllValuesFrom |-> aObjectPropertyExpression)}
	END;

	ObjectAllValuesFrom_SetClassExpression(aObjectAllValuesFrom,aClassExpression) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom &
		aClassExpression : ClassExpression &
		{(aObjectAllValuesFrom |-> aClassExpression)} /<: A_classExpression_objectAllValuesFrom &
		A_classExpression_objectAllValuesFrom~[{aClassExpression}] = {}
		
	THEN 
		A_classExpression_objectAllValuesFrom := ({aObjectAllValuesFrom} <<| A_classExpression_objectAllValuesFrom) \/ {(aObjectAllValuesFrom |-> aClassExpression)}
	END;

	xOwl_UnsetAxioms(aXOwl) = 
	PRE	aXOwl : XOwl
		
	THEN 
		axioms := axioms |>> {aXOwl}
	END;

	ClassAssertion_UnsetClassExpression(aClassAssertion) = 
	PRE	aClassAssertion : ClassAssertion
		
	THEN 
		A_classExpression_classAssertion := {aClassAssertion} <<| A_classExpression_classAssertion
	END;

	ClassAssertion_UnsetIndividual(aClassAssertion) = 
	PRE	aClassAssertion : ClassAssertion
		
	THEN 
		A_individual_classAssertion := {aClassAssertion} <<| A_individual_classAssertion
	END;

	ClassExpression_UnsetClass(aClassExpression) = 
	PRE	aClassExpression : ClassExpression
		
	THEN 
		classOfClassExp := {aClassExpression} <<| classOfClassExp
	END;

	ClassAxiom_UnsetAxiomAnnotations(aClassAxiom) = 
	PRE	aClassAxiom : ClassAxiom
		
	THEN 
		axiomAnnotations := axiomAnnotations |>> {aClassAxiom}
	END;

	EquivalentClasses_UnsetClassExpressions(aEquivalentClasses) = 
	PRE	aEquivalentClasses : EquivalentClasses
		
	THEN 
		A_classExpressions_equivalentClasses := A_classExpressions_equivalentClasses |>> {aEquivalentClasses}
	END;

	DisjointUnion_UnsetClass(aDisjointUnion) = 
	PRE	aDisjointUnion : DisjointUnion
		
	THEN 
		A_class_disjointUnion := {aDisjointUnion} <<| A_class_disjointUnion
	END;

	DisjointUnion_UnsetDisjointClassExpressions(aDisjointUnion) = 
	PRE	aDisjointUnion : DisjointUnion
		
	THEN 
		A_disjointClassExpressions_disjointUnion := A_disjointClassExpressions_disjointUnion |>> {aDisjointUnion}
	END;

	Declaration_UnsetEntity(aDeclaration) = 
	PRE	aDeclaration : Declaration
		
	THEN 
		A_entity_declaration := {aDeclaration} <<| A_entity_declaration
	END;

	ObjectComplementOf_UnsetClassExpression(aObjectComplementOf) = 
	PRE	aObjectComplementOf : ObjectComplementOf
		
	THEN 
		A_classExpression_objectComplementOf := {aObjectComplementOf} <<| A_classExpression_objectComplementOf
	END;

	ObjectOneOf_UnsetIndividuals(aObjectOneOf) = 
	PRE	aObjectOneOf : ObjectOneOf
		
	THEN 
		A_individuals_objectOneOf := {aObjectOneOf} <<| A_individuals_objectOneOf
	END;

	ObjectHasValue_UnsetObjectPropertyExpression(aObjectHasValue) = 
	PRE	aObjectHasValue : ObjectHasValue
		
	THEN 
		A_objectPropertyExpression_objectHasValue := {aObjectHasValue} <<| A_objectPropertyExpression_objectHasValue
	END;

	ObjectHasValue_UnsetIndividual(aObjectHasValue) = 
	PRE	aObjectHasValue : ObjectHasValue
		
	THEN 
		A_individual_objectHasValue := {aObjectHasValue} <<| A_individual_objectHasValue
	END;

	ObjectPropertyExpression_UnsetObjectProperty(aObjectPropertyExpression) = 
	PRE	aObjectPropertyExpression : ObjectPropertyExpression
		
	THEN 
		A_objectProperty_objectPropertyExpression := {aObjectPropertyExpression} <<| A_objectProperty_objectPropertyExpression
	END;

	ObjectSomeValuesFrom_UnsetObjectPropertyExpression(aObjectSomeValuesFrom) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom
		
	THEN 
		A_objectPropertyExpression_objectSomeValuesFrom := {aObjectSomeValuesFrom} <<| A_objectPropertyExpression_objectSomeValuesFrom
	END;

	ObjectSomeValuesFrom_UnsetClassExpression(aObjectSomeValuesFrom) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom
		
	THEN 
		A_classExpression_objectSomeValuesFrom := {aObjectSomeValuesFrom} <<| A_classExpression_objectSomeValuesFrom
	END;

	ObjectAllValuesFrom_UnsetObjectPropertyExpression(aObjectAllValuesFrom) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom
		
	THEN 
		A_objectPropertyExpression_objectAllValuesFrom := {aObjectAllValuesFrom} <<| A_objectPropertyExpression_objectAllValuesFrom
	END;

	ObjectAllValuesFrom_UnsetClassExpression(aObjectAllValuesFrom) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom
		
	THEN 
		A_classExpression_objectAllValuesFrom := {aObjectAllValuesFrom} <<| A_classExpression_objectAllValuesFrom
	END;

	xOwl_AddAxioms(aXOwl,aAxioms) = 
	PRE	aXOwl : XOwl &
		aAxioms : Axiom &
		(aAxioms |-> aXOwl) /: axioms &
		axioms[{aAxioms}] = {}
		
	THEN 
		axioms := axioms \/ {(aAxioms |-> aXOwl)}
	END;

	ClassAxiom_AddAxiomAnnotations(aClassAxiom,aAxiomAnnotations) = 
	PRE	aClassAxiom : ClassAxiom &
		aAxiomAnnotations : Annotation &
		(aAxiomAnnotations |-> aClassAxiom) /: axiomAnnotations &
		axiomAnnotations[{aAxiomAnnotations}] = {}
		
	THEN 
		axiomAnnotations := axiomAnnotations \/ {(aAxiomAnnotations |-> aClassAxiom)}
	END;

	EquivalentClasses_AddClassExpressions(aEquivalentClasses,aClassExpressions) = 
	PRE	aEquivalentClasses : EquivalentClasses &
		aClassExpressions : ClassExpression &
		(aClassExpressions |-> aEquivalentClasses) /: A_classExpressions_equivalentClasses &
		A_classExpressions_equivalentClasses[{aClassExpressions}] = {}
		
	THEN 
		A_classExpressions_equivalentClasses := A_classExpressions_equivalentClasses \/ {(aClassExpressions |-> aEquivalentClasses)}
	END;

	DisjointUnion_AddDisjointClassExpressions(aDisjointUnion,aDisjointClassExpressions) = 
	PRE	aDisjointUnion : DisjointUnion &
		aDisjointClassExpressions : ClassExpression &
		(aDisjointClassExpressions |-> aDisjointUnion) /: A_disjointClassExpressions_disjointUnion &
		A_disjointClassExpressions_disjointUnion[{aDisjointClassExpressions}] = {}
		
	THEN 
		A_disjointClassExpressions_disjointUnion := A_disjointClassExpressions_disjointUnion \/ {(aDisjointClassExpressions |-> aDisjointUnion)}
	END;

	DisjointClasses_AddClassExpressions(aDisjointClasses,aClassExpressions) = 
	PRE	aDisjointClasses : DisjointClasses &
		aClassExpressions : ClassExpression &
		(aClassExpressions |-> aDisjointClasses) /: disjointClassExp &
		disjointClassExp[{aClassExpressions}] = {}
		
	THEN 
		disjointClassExp := disjointClassExp \/ {(aClassExpressions |-> aDisjointClasses)}
	END;

	ObjectOneOf_AddIndividuals(aObjectOneOf,aIndividuals) = 
	PRE	aObjectOneOf : ObjectOneOf &
		aIndividuals : Individual &
		(aObjectOneOf |-> aIndividuals) /: A_individuals_objectOneOf
		
	THEN 
		A_individuals_objectOneOf := A_individuals_objectOneOf \/ {(aObjectOneOf |-> aIndividuals)}
	END;

	xOwl_RemoveAxioms(aXOwl,aAxioms) = 
	PRE	aXOwl : XOwl &
		aAxioms : Axiom &
		(aAxioms |-> aXOwl) : axioms
		
	THEN 
		axioms := axioms - {(aAxioms |-> aXOwl)}
	END;

	ClassAssertion_RemoveClassExpression(aClassAssertion,aClassExpression) = 
	PRE	aClassAssertion : ClassAssertion &
		aClassExpression : ClassExpression &
		(aClassAssertion |-> aClassExpression) : A_classExpression_classAssertion
		
	THEN 
		A_classExpression_classAssertion := A_classExpression_classAssertion - {(aClassAssertion |-> aClassExpression)}
	END;

	ClassAssertion_RemoveIndividual(aClassAssertion,aIndividual) = 
	PRE	aClassAssertion : ClassAssertion &
		aIndividual : Individual &
		(aClassAssertion |-> aIndividual) : A_individual_classAssertion
		
	THEN 
		A_individual_classAssertion := A_individual_classAssertion - {(aClassAssertion |-> aIndividual)}
	END;

	ClassExpression_RemoveClass(aClassExpression,aClass) = 
	PRE	aClassExpression : ClassExpression &
		aClass : Class &
		(aClassExpression |-> aClass) : classOfClassExp
		
	THEN 
		classOfClassExp := classOfClassExp - {(aClassExpression |-> aClass)}
	END;

	ClassAxiom_RemoveAxiomAnnotations(aClassAxiom,aAxiomAnnotations) = 
	PRE	aClassAxiom : ClassAxiom &
		aAxiomAnnotations : Annotation &
		(aAxiomAnnotations |-> aClassAxiom) : axiomAnnotations
		
	THEN 
		axiomAnnotations := axiomAnnotations - {(aAxiomAnnotations |-> aClassAxiom)}
	END;

	EquivalentClasses_RemoveClassExpressions(aEquivalentClasses,aClassExpressions) = 
	PRE	aEquivalentClasses : EquivalentClasses &
		aClassExpressions : ClassExpression &
		(aClassExpressions |-> aEquivalentClasses) : A_classExpressions_equivalentClasses
		
	THEN 
		A_classExpressions_equivalentClasses := A_classExpressions_equivalentClasses - {(aClassExpressions |-> aEquivalentClasses)}
	END;

	DisjointUnion_RemoveClass(aDisjointUnion,aClass) = 
	PRE	aDisjointUnion : DisjointUnion &
		aClass : Class &
		(aDisjointUnion |-> aClass) : A_class_disjointUnion
		
	THEN 
		A_class_disjointUnion := A_class_disjointUnion - {(aDisjointUnion |-> aClass)}
	END;

	DisjointUnion_RemoveDisjointClassExpressions(aDisjointUnion,aDisjointClassExpressions) = 
	PRE	aDisjointUnion : DisjointUnion &
		aDisjointClassExpressions : ClassExpression &
		(aDisjointClassExpressions |-> aDisjointUnion) : A_disjointClassExpressions_disjointUnion
		
	THEN 
		A_disjointClassExpressions_disjointUnion := A_disjointClassExpressions_disjointUnion - {(aDisjointClassExpressions |-> aDisjointUnion)}
	END;

	DisjointClasses_RemoveClassExpressions(aDisjointClasses,aClassExpressions) = 
	PRE	aDisjointClasses : DisjointClasses &
		aClassExpressions : ClassExpression &
		(aClassExpressions |-> aDisjointClasses) : disjointClassExp &
		card(disjointClassExp~[{aDisjointClasses}]) >= 3
		
	THEN 
		disjointClassExp := disjointClassExp - {(aClassExpressions |-> aDisjointClasses)}
	END;

	Declaration_RemoveEntity(aDeclaration,aEntity) = 
	PRE	aDeclaration : Declaration &
		aEntity : Entity &
		(aDeclaration |-> aEntity) : A_entity_declaration
		
	THEN 
		A_entity_declaration := A_entity_declaration - {(aDeclaration |-> aEntity)}
	END;

	ObjectComplementOf_RemoveClassExpression(aObjectComplementOf,aClassExpression) = 
	PRE	aObjectComplementOf : ObjectComplementOf &
		aClassExpression : ClassExpression &
		(aObjectComplementOf |-> aClassExpression) : A_classExpression_objectComplementOf
		
	THEN 
		A_classExpression_objectComplementOf := A_classExpression_objectComplementOf - {(aObjectComplementOf |-> aClassExpression)}
	END;

	ObjectOneOf_RemoveIndividuals(aObjectOneOf,aIndividuals) = 
	PRE	aObjectOneOf : ObjectOneOf &
		aIndividuals : Individual &
		(aObjectOneOf |-> aIndividuals) : A_individuals_objectOneOf
		
	THEN 
		A_individuals_objectOneOf := A_individuals_objectOneOf - {(aObjectOneOf |-> aIndividuals)}
	END;

	ObjectHasValue_RemoveObjectPropertyExpression(aObjectHasValue,aObjectPropertyExpression) = 
	PRE	aObjectHasValue : ObjectHasValue &
		aObjectPropertyExpression : ObjectPropertyExpression &
		(aObjectHasValue |-> aObjectPropertyExpression) : A_objectPropertyExpression_objectHasValue
		
	THEN 
		A_objectPropertyExpression_objectHasValue := A_objectPropertyExpression_objectHasValue - {(aObjectHasValue |-> aObjectPropertyExpression)}
	END;

	ObjectHasValue_RemoveIndividual(aObjectHasValue,aIndividual) = 
	PRE	aObjectHasValue : ObjectHasValue &
		aIndividual : Individual &
		(aObjectHasValue |-> aIndividual) : A_individual_objectHasValue
		
	THEN 
		A_individual_objectHasValue := A_individual_objectHasValue - {(aObjectHasValue |-> aIndividual)}
	END;

	ObjectPropertyExpression_RemoveObjectProperty(aObjectPropertyExpression,aObjectProperty) = 
	PRE	aObjectPropertyExpression : ObjectPropertyExpression &
		aObjectProperty : ObjectProperty &
		(aObjectPropertyExpression |-> aObjectProperty) : A_objectProperty_objectPropertyExpression
		
	THEN 
		A_objectProperty_objectPropertyExpression := A_objectProperty_objectPropertyExpression - {(aObjectPropertyExpression |-> aObjectProperty)}
	END;

	ObjectSomeValuesFrom_RemoveObjectPropertyExpression(aObjectSomeValuesFrom,aObjectPropertyExpression) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom &
		aObjectPropertyExpression : ObjectPropertyExpression &
		(aObjectSomeValuesFrom |-> aObjectPropertyExpression) : A_objectPropertyExpression_objectSomeValuesFrom
		
	THEN 
		A_objectPropertyExpression_objectSomeValuesFrom := A_objectPropertyExpression_objectSomeValuesFrom - {(aObjectSomeValuesFrom |-> aObjectPropertyExpression)}
	END;

	ObjectSomeValuesFrom_RemoveClassExpression(aObjectSomeValuesFrom,aClassExpression) = 
	PRE	aObjectSomeValuesFrom : ObjectSomeValuesFrom &
		aClassExpression : ClassExpression &
		(aObjectSomeValuesFrom |-> aClassExpression) : A_classExpression_objectSomeValuesFrom
		
	THEN 
		A_classExpression_objectSomeValuesFrom := A_classExpression_objectSomeValuesFrom - {(aObjectSomeValuesFrom |-> aClassExpression)}
	END;

	ObjectAllValuesFrom_RemoveObjectPropertyExpression(aObjectAllValuesFrom,aObjectPropertyExpression) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom &
		aObjectPropertyExpression : ObjectPropertyExpression &
		(aObjectAllValuesFrom |-> aObjectPropertyExpression) : A_objectPropertyExpression_objectAllValuesFrom
		
	THEN 
		A_objectPropertyExpression_objectAllValuesFrom := A_objectPropertyExpression_objectAllValuesFrom - {(aObjectAllValuesFrom |-> aObjectPropertyExpression)}
	END;

	ObjectAllValuesFrom_RemoveClassExpression(aObjectAllValuesFrom,aClassExpression) = 
	PRE	aObjectAllValuesFrom : ObjectAllValuesFrom &
		aClassExpression : ClassExpression &
		(aObjectAllValuesFrom |-> aClassExpression) : A_classExpression_objectAllValuesFrom
		
	THEN 
		A_classExpression_objectAllValuesFrom := A_classExpression_objectAllValuesFrom - {(aObjectAllValuesFrom |-> aClassExpression)}
	END;

	result <-- xOwl_GetOntologyIRI(aXOwl) = 
	PRE	aXOwl : XOwl &
		aXOwl : dom(xOwl_ontologyIRI)
		
	THEN 
		result := xOwl_ontologyIRI(aXOwl)
	END;

	result <-- xOwl_GetVersionIRI(aXOwl) = 
	PRE	aXOwl : XOwl &
		aXOwl : dom(xOwl_versionIRI)
		
	THEN 
		result := xOwl_versionIRI(aXOwl)
	END;

	result <-- Entity_GetName(aEntity) = 
	PRE	aEntity : Entity &
		aEntity : dom(Entity_name)
		
	THEN 
		result := Entity_name(aEntity)
	END;

	result <-- Annotation_GetAnnotationValue(aAnnotation) = 
	PRE	aAnnotation : Annotation &
		aAnnotation : dom(Annotation_annotationValue)
		
	THEN 
		result := Annotation_annotationValue(aAnnotation)
	END;

	xOwl_SetOntologyIRI(aXOwl,aOntologyIRI) = 
	PRE	aXOwl : XOwl &
		aOntologyIRI : STRING
		
	THEN 
		xOwl_ontologyIRI := ({aXOwl} <<| xOwl_ontologyIRI)  \/ {(aXOwl |-> aOntologyIRI)}
	END;

	xOwl_SetVersionIRI(aXOwl,aVersionIRI) = 
	PRE	aXOwl : XOwl &
		aVersionIRI : STRING
		
	THEN 
		xOwl_versionIRI := ({aXOwl} <<| xOwl_versionIRI)  \/ {(aXOwl |-> aVersionIRI)}
	END;

	Entity_SetName(aEntity,aName) = 
	PRE	aEntity : Entity &
		aName : STRING
		
	THEN 
		Entity_name := ({aEntity} <<| Entity_name)  \/ {(aEntity |-> aName)}
	END;

	Annotation_SetAnnotationValue(aAnnotation,aAnnotationValue) = 
	PRE	aAnnotation : Annotation &
		aAnnotationValue : STRING
		
	THEN 
		Annotation_annotationValue := ({aAnnotation} <<| Annotation_annotationValue)  \/ {(aAnnotation |-> aAnnotationValue)}
	END;

	xOwl_UnsetOntologyIRI(aXOwl) = 
	PRE	aXOwl : XOwl
		
	THEN 
		xOwl_ontologyIRI := {aXOwl} <<| xOwl_ontologyIRI
	END;

	xOwl_UnsetVersionIRI(aXOwl) = 
	PRE	aXOwl : XOwl
		
	THEN 
		xOwl_versionIRI := {aXOwl} <<| xOwl_versionIRI
	END;

	Entity_UnsetName(aEntity) = 
	PRE	aEntity : Entity
		
	THEN 
		Entity_name := {aEntity} <<| Entity_name
	END;

	Annotation_UnsetAnnotationValue(aAnnotation) = 
	PRE	aAnnotation : Annotation
		
	THEN 
		Annotation_annotationValue := {aAnnotation} <<| Annotation_annotationValue
	END;

	xOwl_RemoveOntologyIRI(aXOwl,aOntologyIRI) = 
	PRE	aXOwl : XOwl &
		aOntologyIRI : STRING &
		{(aXOwl |-> aOntologyIRI)} <: xOwl_ontologyIRI
		
	THEN 
		xOwl_ontologyIRI := xOwl_ontologyIRI - {(aXOwl |-> aOntologyIRI)}
	END;

	xOwl_RemoveVersionIRI(aXOwl,aVersionIRI) = 
	PRE	aXOwl : XOwl &
		aVersionIRI : STRING &
		{(aXOwl |-> aVersionIRI)} <: xOwl_versionIRI
		
	THEN 
		xOwl_versionIRI := xOwl_versionIRI - {(aXOwl |-> aVersionIRI)}
	END;

	Entity_RemoveName(aEntity,aName) = 
	PRE	aEntity : Entity &
		aName : STRING &
		{(aEntity |-> aName)} <: Entity_name
		
	THEN 
		Entity_name := Entity_name - {(aEntity |-> aName)}
	END;

	Annotation_RemoveAnnotationValue(aAnnotation,aAnnotationValue) = 
	PRE	aAnnotation : Annotation &
		aAnnotationValue : STRING &
		{(aAnnotation |-> aAnnotationValue)} <: Annotation_annotationValue
		
	THEN 
		Annotation_annotationValue := Annotation_annotationValue - {(aAnnotation |-> aAnnotationValue)}
	END


END
