
/*
 * This file was generated by Meeduse on Monday, May 17, 2021 at 3:13:37 PM CEST
 */


MACHINE 
	
	pnmlcoremodel

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == pnmlcoremodel;
	

SETS
	
	ID_AS;
	LABEL

ABSTRACT_VARIABLES
	
	ID,
	Label,
	Object,
	Node,
	Arc,
	PlaceNode,
	TransitionNode,
	Place,
	Transition,
	out,
	in

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	ID : FIN(ID_AS) &
	Label : FIN(LABEL) &
	Object <: ID &
	Node <: Object &
	Arc <: Object &
	PlaceNode <: Node &
	TransitionNode <: Node &
	Place <: PlaceNode &
	Transition <: TransitionNode &
	out : Arc --> Node &
	in : Arc --> Node &
	Arc /\ Node = {} &
	PlaceNode /\ TransitionNode = {}

INITIALISATION
	
	ID := {} ||
	Label := {} ||
	Object := {} ||
	Node := {} ||
	Arc := {} ||
	PlaceNode := {} ||
	TransitionNode := {} ||
	Place := {} ||
	Transition := {} ||
	out := {} ||
	in := {}

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	Arc_NEW(aArc,aSource,aTarget) = 
	PRE	aArc : ID_AS &
		aSource : Node &
		aTarget : Node &
		aArc /: ID
		
	THEN 
		Arc := Arc \/ {aArc} ||
		ID := ID \/ {aArc} ||
		Object := Object \/ {aArc} ||
		out := out \/ {(aArc |-> aSource)} ||
		in := in \/ {(aArc |-> aTarget)}
	END;

	Place_NEW(aPlace) = 
	PRE	aPlace : ID_AS &
		aPlace /: ID
		
	THEN 
		Place := Place \/ {aPlace} ||
		ID := ID \/ {aPlace} ||
		Object := Object \/ {aPlace} ||
		PlaceNode := PlaceNode \/ {aPlace} ||
		Node := Node \/ {aPlace}
	END;

	Transition_NEW(aTransition) = 
	PRE	aTransition : ID_AS &
		aTransition /: ID
		
	THEN 
		Transition := Transition \/ {aTransition} ||
		ID := ID \/ {aTransition} ||
		Object := Object \/ {aTransition} ||
		Node := Node \/ {aTransition} ||
		TransitionNode := TransitionNode \/ {aTransition}
	END;

	Arc_Free(aArc) = 
	PRE	aArc : Arc
		
	THEN 
		Arc := Arc - {aArc} ||
		ID := ID - {aArc} ||
		Object := Object - {aArc} ||
		out := {aArc} <<| out ||
		in := {aArc} <<| in
	END;

	Place_Free(aPlace) = 
	PRE	aPlace : Place &
		out~[{aPlace}] = {} &
		in~[{aPlace}] = {}
		
	THEN 
		Place := Place - {aPlace} ||
		ID := ID - {aPlace} ||
		Object := Object - {aPlace} ||
		PlaceNode := PlaceNode - {aPlace} ||
		Node := Node - {aPlace} ||
		out := out |>> {aPlace} ||
		in := in |>> {aPlace}
	END;

	Transition_Free(aTransition) = 
	PRE	aTransition : Transition &
		out~[{aTransition}] = {} &
		in~[{aTransition}] = {}
		
	THEN 
		Transition := Transition - {aTransition} ||
		ID := ID - {aTransition} ||
		Object := Object - {aTransition} ||
		Node := Node - {aTransition} ||
		TransitionNode := TransitionNode - {aTransition} ||
		out := out |>> {aTransition} ||
		in := in |>> {aTransition}
	END;

	result <-- Node_GetOut(aNode) = 
	PRE	aNode : Node &
		aNode : ran(out)
		
	THEN 
		result := out~[{aNode}]
	END;

	result <-- Node_GetIn(aNode) = 
	PRE	aNode : Node &
		aNode : ran(in)
		
	THEN 
		result := in~[{aNode}]
	END;

	result <-- Arc_GetSource(aArc) = 
	PRE	aArc : Arc &
		aArc : dom(out)
		
	THEN 
		result := out(aArc)
	END;

	result <-- Arc_GetTarget(aArc) = 
	PRE	aArc : Arc &
		aArc : dom(in)
		
	THEN 
		result := in(aArc)
	END;

	Node_SetOut(aNode,theOut) = 
	PRE	aNode : Node &
		theOut : FIN(Arc) &
		(theOut * {aNode}) /<: out &
		out~[{aNode}] = {} &
		!added.( added : theOut => out[{added}] = {})
		
	THEN 
		out := (out |>> {aNode}) \/ (theOut * {aNode})
	END;

	Node_SetIn(aNode,theIn) = 
	PRE	aNode : Node &
		theIn : FIN(Arc) &
		(theIn * {aNode}) /<: in &
		in~[{aNode}] = {} &
		!added.( added : theIn => in[{added}] = {})
		
	THEN 
		in := (in |>> {aNode}) \/ (theIn * {aNode})
	END;

	Arc_SetSource(aArc,aSource) = 
	PRE	aArc : Arc &
		aSource : Node &
		{(aArc |-> aSource)} /<: out
		
	THEN 
		out := ({aArc} <<| out) \/ {(aArc |-> aSource)}
	END;

	Arc_SetTarget(aArc,aTarget) = 
	PRE	aArc : Arc &
		aTarget : Node &
		{(aArc |-> aTarget)} /<: in
		
	THEN 
		in := ({aArc} <<| in) \/ {(aArc |-> aTarget)}
	END;

	Node_UnsetOut(aNode) = 
	PRE	aNode : Node &
		out~[{aNode}] = {}
		
	THEN 
		out := out |>> {aNode}
	END;

	Node_UnsetIn(aNode) = 
	PRE	aNode : Node &
		in~[{aNode}] = {}
		
	THEN 
		in := in |>> {aNode}
	END;

	Node_AddOut(aNode,aOut) = 
	PRE	aNode : Node &
		aOut : Arc &
		(aOut |-> aNode) /: out &
		out[{aOut}] = {}
		
	THEN 
		out := out \/ {(aOut |-> aNode)}
	END;

	Node_AddIn(aNode,aIn) = 
	PRE	aNode : Node &
		aIn : Arc &
		(aIn |-> aNode) /: in &
		in[{aIn}] = {}
		
	THEN 
		in := in \/ {(aIn |-> aNode)}
	END;

	Node_RemoveOut(aNode,aOut) = 
	PRE	aNode : Node &
		aOut : Arc &
		(aOut |-> aNode) : out &
		card(out[{aOut}]) >= 2
		
	THEN 
		out := out - {(aOut |-> aNode)}
	END;

	Node_RemoveIn(aNode,aIn) = 
	PRE	aNode : Node &
		aIn : Arc &
		(aIn |-> aNode) : in &
		card(in[{aIn}]) >= 2
		
	THEN 
		in := in - {(aIn |-> aNode)}
	END


END
