

REFINEMENT M1_Existing
REFINES M0_Existing

VARIABLES 
   stateTTD,
   trainOccupationTTDFront,
   trainOccupationTTDRear,
   isConnected,
   supervisor,
   trainLocationTTDRear,
   trainLocationTTDFront
    
INVARIANT
    (trainLocationTTDFront : dom(trainKind~[{TimErtms, Ertms}]<|trainOccupationTTDFront) +-> Ttds) &
    (trainLocationTTDRear : dom(trainLocationTTDFront) +-> Ttds) &
    (trainKind~[{TimErtms}] /\ dom(trainLocationTTDFront) = dom(trainLocationTTDRear)) &
    (!tr . (tr : dom(trainLocationTTDFront) & tr : dom(trainLocationTTDRear)  => trainLocationTTDRear(tr) <= trainLocationTTDFront(tr))) &
    (!tr . (tr : dom(isConnected) & isConnected(tr)=TRUE & trainKind(tr)=TimErtms & tr : dom(trainOccupationTTDFront) => tr : dom(trainLocationTTDRear))) &
    (!tr . (tr : dom(isConnected) & isConnected(tr)=TRUE  & tr : dom(trainOccupationTTDFront)=> tr: dom(trainLocationTTDFront) & trainLocationTTDFront(tr)=trainOccupationTTDFront(tr))) &
    (!tr . (tr : dom(trainLocationTTDRear) => trainLocationTTDRear(tr) <= trainOccupationTTDRear(tr)))

INITIALISATION
    stateTTD := Ttds * {occupiedT} ||
    trainOccupationTTDRear := {} ||
    trainOccupationTTDFront := {} ||
    isConnected := trainKind~[{Ertms, TimErtms}] * {FALSE} ||
    supervisor := TRUE ||
    trainLocationTTDFront := {} ||
    trainLocationTTDRear := {}

OPERATIONS
trainSupervisor =
    ANY 
        ttds, active 
    WHERE
        ttds=(UNION tr.(tr: dom(trainOccupationTTDFront) | trainOccupationTTDRear(tr)..trainOccupationTTDFront(tr)))
        & supervisor = TRUE
        & active: BOOL
        
        & supervisor=TRUE
    THEN
        stateTTD := (ttds * {occupiedT}) \/ ((Ttds - ttds)*{freeT}) ||
        supervisor := active
  END ;


trainEntring =
    ANY tr 
    WHERE
      tr: TRAINS - dom(trainOccupationTTDFront) 
      & supervisor = FALSE
      & tr : Trains
    THEN
      trainOccupationTTDFront(tr) := minTTD ||
      trainOccupationTTDRear(tr) := minTTD ||
      supervisor := TRUE ||
      
      trainLocationTTDRear := 
          IF (tr |-> TRUE) : isConnected & trainKind(tr) = TimErtms 
          THEN 
              trainLocationTTDRear \/ {tr |-> minTTD} 
          ELSE 
              trainLocationTTDRear 
          END ||
      trainLocationTTDFront := 
          IF 
              (tr |-> TRUE) : isConnected 
          THEN trainLocationTTDFront \/ {tr |-> minTTD} 
          ELSE 
              trainLocationTTDFront 
          END
END;

trainMovingInSameTTD = 
    ANY tr, integ
    WHERE
      tr: dom(trainOccupationTTDFront) 
      & supervisor = FALSE 
      & tr : Trains
      & integ : BOOL
    THEN
      supervisor := TRUE ||
       trainLocationTTDRear := {TRUE |-> (trainLocationTTDRear <+ {tr |-> trainOccupationTTDRear(tr)}),FALSE |-> trainLocationTTDRear}(bool(tr |-> TRUE : isConnected & (trainKind(tr) = TimErtms & integ = TRUE)))
  END;

trainMovingFrontNextTTD =
    ANY tr, newFront 
    WHERE
      tr : dom(trainOccupationTTDFront)
      & trainOccupationTTDFront(tr) < maxTTD
      & supervisor = FALSE
      & newFront = trainOccupationTTDFront(tr) + 1
      & tr : Trains
    THEN
      trainOccupationTTDFront(tr) := newFront ||
      supervisor := TRUE  ||
      trainLocationTTDFront := 
          IF (tr |-> TRUE) : isConnected 
          THEN 
              trainLocationTTDFront <+ {tr |-> newFront} 
          ELSE 
              trainLocationTTDFront 
          END
    END;

trainMovingRearNextTTD =
    ANY tr, newRear , integ
    WHERE
      tr : dom(trainOccupationTTDFront)
      & trainOccupationTTDRear(tr) < trainOccupationTTDFront(tr)
      & supervisor = FALSE
      & newRear = trainOccupationTTDRear(tr) + 1
      & tr : Trains
    THEN
      trainOccupationTTDRear(tr) := newRear ||
      supervisor := TRUE ||
      trainLocationTTDRear := 
          IF (tr |-> TRUE) : isConnected & (trainKind(tr) = TimErtms & integ = TRUE) 
          THEN trainLocationTTDRear <+ {tr |-> newRear} 
          ELSE trainLocationTTDRear 
          END
  END;

  
trainExiting = 
    ANY tr 
    WHERE
      tr : dom(trainOccupationTTDFront)
      & trainOccupationTTDRear(tr) = maxTTD
      & supervisor = FALSE
    THEN
      trainOccupationTTDFront := {tr} <<| trainOccupationTTDFront ||
      trainOccupationTTDRear := {tr} <<| trainOccupationTTDRear ||
      supervisor := TRUE ||
      trainLocationTTDFront := {tr} <<| trainLocationTTDFront ||
      trainLocationTTDRear := {tr} <<| trainLocationTTDRear
  END;

  
trainConnect = 
    ANY tr 
    WHERE
      tr : Trains
      & trainKind(tr) : {Ertms,TimErtms}
      & isConnected(tr) = FALSE
      & supervisor = FALSE
    THEN
      isConnected(tr) := TRUE ||
      supervisor := TRUE  ||
      trainLocationTTDRear := 
          IF trainKind(tr) = TimErtms 
          THEN trainLocationTTDRear <+ ({tr} <| trainOccupationTTDRear)
          ELSE trainLocationTTDRear 
          END ||
      trainLocationTTDFront := trainLocationTTDFront <+ ({tr} <| trainOccupationTTDFront)
  END;

  
trainDisconnect = 
    ANY tr 
    WHERE
      tr : dom(isConnected) & isConnected(tr)=TRUE
      & supervisor = FALSE
    THEN
      isConnected(tr) := FALSE ||
      supervisor := TRUE
  END;

  
 trainSplit = 
    ANY tr, car, td 
    WHERE
      tr : Trains & tr : dom(trainOccupationTTDFront)
      & car : Cars -  dom(trainOccupationTTDFront)
      & td : Ttds & td : trainOccupationTTDRear(tr)..trainOccupationTTDFront(tr)
      & supervisor = TRUE
      & FALSE = TRUE
    THEN
      trainOccupationTTDRear := ({tr}<<|trainOccupationTTDRear) \/ {tr|->td, car|->trainOccupationTTDRear(tr)} ||
      trainOccupationTTDFront(car) := td ||
      supervisor := FALSE
  END; 

TimerExipation =
    SELECT
        supervisor = FALSE
    THEN
        supervisor := TRUE
    END;
    
muteTimerExpire = 
BEGIN
    skip
END;

disconectTimerExpire = 
BEGIN
    skip
END;
ghostTimerExpire = 
BEGIN
    skip
END;

assignMANoErtmsTrain =
BEGIN
    skip
END;
               
assignMAErtmsTrain = 
BEGIN
    skip
END

 END
