
/*
 * This file was generated by Meeduse animator on Friday, July 1, 2022 at 3:30:37 PM CEST
 */


MACHINE 
	
	railwayDSL1

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == railwayDSL1;
	
	/*
	 * Start of user code DEFINITIONS (NOT GENERATED)
    */
    
    /*
    * End of user code
	 */
	
	

SETS
	
	Status = {Free,Occupied};
	KindsOfTrains = {TIMSERTMS,ERTMS,NoERTMS};
	VSSStatus = {FreeVSS,OccupiedVSS,UnknownVSS,AmbiguousVSS};
	TimerValuesDSL = {Inactive,Running,Expired};
	SupervisionStatus = {Active,Deactive};
	RAILWAY;
	TRACKSIDE;
	TRAIN;
	VIRTUALBLOCK

CONSTANTS
	
	VIRTUALBLOCK1,
	VIRTUALBLOCK2,
	VIRTUALBLOCK3,
	VIRTUALBLOCK4,
	VIRTUALBLOCK5,
	VIRTUALBLOCK6,
	VIRTUALBLOCK7,
	VIRTUALBLOCK8,
	VIRTUALBLOCK9,
	VIRTUALBLOCK10,
	VIRTUALBLOCK11,
	TRAIN1,
	TRAIN2,
	TRACKSIDE1,
	TRACKSIDE2,
	TRACKSIDE3,
	TRACKSIDE4,
	TRACKSIDE5,
	RAILWAY1,
	Railway,
	Trackside,
	Train,
	VirtualBlock,
	KindOfTrain,
	previous_next,
	virtualBlockToTrackside,
	previous_next_vb

PROPERTIES
	
	VIRTUALBLOCK1 : VIRTUALBLOCK &
	VIRTUALBLOCK2 : VIRTUALBLOCK &
	VIRTUALBLOCK3 : VIRTUALBLOCK &
	VIRTUALBLOCK4 : VIRTUALBLOCK &
	VIRTUALBLOCK5 : VIRTUALBLOCK &
	VIRTUALBLOCK6 : VIRTUALBLOCK &
	VIRTUALBLOCK7 : VIRTUALBLOCK &
	VIRTUALBLOCK8 : VIRTUALBLOCK &
	VIRTUALBLOCK9 : VIRTUALBLOCK &
	VIRTUALBLOCK10 : VIRTUALBLOCK &
	VIRTUALBLOCK11 : VIRTUALBLOCK &
	TRAIN1 : TRAIN &
	TRAIN2 : TRAIN &
	TRACKSIDE1 : TRACKSIDE &
	TRACKSIDE2 : TRACKSIDE &
	TRACKSIDE3 : TRACKSIDE &
	TRACKSIDE4 : TRACKSIDE &
	TRACKSIDE5 : TRACKSIDE &
	RAILWAY1 : RAILWAY &
	Railway : FIN(RAILWAY) &
	Trackside : FIN(TRACKSIDE) &
	Train : FIN(TRAIN) &
	VirtualBlock : FIN(VIRTUALBLOCK) &
	KindOfTrain : Train +-> KindsOfTrains &
	previous_next : Trackside <-> Trackside &
	virtualBlockToTrackside : VirtualBlock --> Trackside &
	previous_next_vb : VirtualBlock >+> VirtualBlock &
	card({RAILWAY1}) = 1 &
	RAILWAY /= {} &
	card({TRACKSIDE1,TRACKSIDE2,TRACKSIDE3,TRACKSIDE4,TRACKSIDE5}) = 5 &
	card(TRACKSIDE) >= 5 &
	card({TRAIN1,TRAIN2}) = 2 &
	card(TRAIN) >= 2 &
	card({VIRTUALBLOCK1,VIRTUALBLOCK2,VIRTUALBLOCK3,VIRTUALBLOCK4,VIRTUALBLOCK5,VIRTUALBLOCK6,VIRTUALBLOCK7,VIRTUALBLOCK8,VIRTUALBLOCK9,VIRTUALBLOCK10,VIRTUALBLOCK11}) = 11 &
	card(VIRTUALBLOCK) >= 11 &
	Railway = {RAILWAY1} &
	Trackside = {TRACKSIDE1,TRACKSIDE2,TRACKSIDE3,TRACKSIDE4,TRACKSIDE5} &
	Train = {TRAIN1,TRAIN2} &
	VirtualBlock = {VIRTUALBLOCK1,VIRTUALBLOCK2,VIRTUALBLOCK3,VIRTUALBLOCK4,VIRTUALBLOCK5,VIRTUALBLOCK6,VIRTUALBLOCK7,VIRTUALBLOCK8,VIRTUALBLOCK9,VIRTUALBLOCK10,VIRTUALBLOCK11} &
	KindOfTrain = {(TRAIN1 |-> TIMSERTMS),(TRAIN2 |-> TIMSERTMS)} &
	previous_next = {(TRACKSIDE2 |-> TRACKSIDE1),(TRACKSIDE3 |-> TRACKSIDE2),(TRACKSIDE4 |-> TRACKSIDE3),(TRACKSIDE5 |-> TRACKSIDE4)} &
	virtualBlockToTrackside = {(VIRTUALBLOCK1 |-> TRACKSIDE1),(VIRTUALBLOCK2 |-> TRACKSIDE1),(VIRTUALBLOCK3 |-> TRACKSIDE1),(VIRTUALBLOCK4 |-> TRACKSIDE2),(VIRTUALBLOCK5 |-> TRACKSIDE2),(VIRTUALBLOCK6 |-> TRACKSIDE3),(VIRTUALBLOCK7 |-> TRACKSIDE3),(VIRTUALBLOCK8 |-> TRACKSIDE4),(VIRTUALBLOCK9 |-> TRACKSIDE4),(VIRTUALBLOCK10 |-> TRACKSIDE5),(VIRTUALBLOCK11 |-> TRACKSIDE5)} &
	previous_next_vb = {(VIRTUALBLOCK1 |-> VIRTUALBLOCK2),(VIRTUALBLOCK2 |-> VIRTUALBLOCK3),(VIRTUALBLOCK3 |-> VIRTUALBLOCK4),(VIRTUALBLOCK4 |-> VIRTUALBLOCK5),(VIRTUALBLOCK5 |-> VIRTUALBLOCK6),(VIRTUALBLOCK6 |-> VIRTUALBLOCK7),(VIRTUALBLOCK7 |-> VIRTUALBLOCK8),(VIRTUALBLOCK8 |-> VIRTUALBLOCK9),(VIRTUALBLOCK9 |-> VIRTUALBLOCK10),(VIRTUALBLOCK10 |-> VIRTUALBLOCK11)}

ABSTRACT_VARIABLES
	
	TrainFront,
	TrainRear,
	VssTrainRear,
	VssTrainFront,
	frontTrackLocation,
	rearTrackLocation,
	frontVssLocation,
	rearVssLocation,
	frontMA,
	rearMA,
	previousVssFront,
	SupervisionOfTrain,
	TrackStatus,
	TrackGhostTimer,
	Connected,
	LocationLengthChange,
	previousVssFrontStatus,
	TrainMuteTimer,
	TrainWaitIntegrityTimer,
	TrainReConnected,
	VssStatus,
	VssDisconnectTimer

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
    */
    
    /*
    * End of user code
	 */
	
	
	TrainFront : Train +-> Trackside &
	TrainRear : Train +-> Trackside &
	VssTrainRear : Train +-> VirtualBlock &
	VssTrainFront : Train +-> VirtualBlock &
	frontTrackLocation : Train +-> Trackside &
	rearTrackLocation : Train +-> Trackside &
	frontVssLocation : Train +-> VirtualBlock &
	rearVssLocation : Train +-> VirtualBlock &
	frontMA : Train +-> VirtualBlock &
	rearMA : Train +-> VirtualBlock &
	previousVssFront : Train +-> VirtualBlock &
	SupervisionOfTrain : Railway +-> SupervisionStatus &
	TrackStatus : Trackside +-> Status &
	TrackGhostTimer : Trackside +-> TimerValuesDSL &
	Connected : Train +-> BOOL &
	LocationLengthChange : Train +-> BOOL &
	previousVssFrontStatus : Train +-> VSSStatus &
	TrainMuteTimer : Train +-> TimerValuesDSL &
	TrainWaitIntegrityTimer : Train +-> TimerValuesDSL &
	TrainReConnected : Train +-> BOOL &
	VssStatus : VirtualBlock +-> VSSStatus &
	VssDisconnectTimer : VirtualBlock +-> TimerValuesDSL &
	!thePrevious.( thePrevious : ran(previous_next) => card(previous_next~[{thePrevious}]) <= 2) &
	!theNext.( theNext : dom(previous_next) => card(previous_next[{theNext}]) <= 2)

INITIALISATION
	
	SupervisionOfTrain := {(RAILWAY1 |-> Active)} ||
	TrackStatus := {(TRACKSIDE1 |-> Free),(TRACKSIDE2 |-> Free),(TRACKSIDE3 |-> Free),(TRACKSIDE4 |-> Free),(TRACKSIDE5 |-> Free)} ||
	TrackGhostTimer := {(TRACKSIDE1 |-> Inactive),(TRACKSIDE2 |-> Inactive),(TRACKSIDE3 |-> Inactive),(TRACKSIDE4 |-> Inactive),(TRACKSIDE5 |-> Inactive)} ||
	Connected := {(TRAIN1 |-> TRUE),(TRAIN2 |-> FALSE)} ||
	LocationLengthChange := {(TRAIN1 |-> FALSE),(TRAIN2 |-> FALSE)} ||
	previousVssFrontStatus := {(TRAIN1 |-> FreeVSS),(TRAIN2 |-> FreeVSS)} ||
	TrainMuteTimer := {(TRAIN1 |-> Inactive),(TRAIN2 |-> Inactive)} ||
	TrainWaitIntegrityTimer := {(TRAIN1 |-> Inactive),(TRAIN2 |-> Inactive)} ||
	TrainReConnected := {(TRAIN1 |-> FALSE),(TRAIN2 |-> FALSE)} ||
	VssStatus := {(VIRTUALBLOCK1 |-> UnknownVSS),(VIRTUALBLOCK2 |-> UnknownVSS),(VIRTUALBLOCK3 |-> UnknownVSS),(VIRTUALBLOCK4 |-> UnknownVSS),(VIRTUALBLOCK5 |-> UnknownVSS),(VIRTUALBLOCK6 |-> UnknownVSS),(VIRTUALBLOCK7 |-> UnknownVSS),(VIRTUALBLOCK8 |-> UnknownVSS),(VIRTUALBLOCK9 |-> UnknownVSS),(VIRTUALBLOCK10 |-> UnknownVSS),(VIRTUALBLOCK11 |-> UnknownVSS)} ||
	VssDisconnectTimer := {(VIRTUALBLOCK1 |-> Inactive),(VIRTUALBLOCK2 |-> Inactive),(VIRTUALBLOCK3 |-> Inactive),(VIRTUALBLOCK4 |-> Inactive),(VIRTUALBLOCK5 |-> Inactive),(VIRTUALBLOCK6 |-> Inactive),(VIRTUALBLOCK7 |-> Inactive),(VIRTUALBLOCK8 |-> Inactive),(VIRTUALBLOCK9 |-> Inactive),(VIRTUALBLOCK10 |-> Inactive),(VIRTUALBLOCK11 |-> Inactive)} ||
	TrainFront := {} ||
	TrainRear := {} ||
	VssTrainRear := {} ||
	VssTrainFront := {} ||
	frontTrackLocation := {} ||
	rearTrackLocation := {} ||
	frontVssLocation := {} ||
	rearVssLocation := {} ||
	frontMA := {} ||
	rearMA := {} ||
	previousVssFront := {}

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
    */
    SetConnecteds(aTrains,aConnected) = 
    PRE	aTrains <: Train &
        aConnected : BOOL
        
    THEN 
        Connected := Connected  <+ aTrains * {aConnected}
    END;  
    
    SetFrontMA2(aTrain,aFrontMA) = 
    PRE	aTrain : Train &
        aFrontMA : VirtualBlock 
        
    THEN 
        frontMA := ({aTrain} <<| frontMA) \/ {(aTrain |-> aFrontMA)}
    END;
    
    SetRearMA2(aTrain,aRearMA) = 
    PRE	aTrain : Train &
        aRearMA : VirtualBlock 
        
    THEN 
        rearMA := ({aTrain} <<| rearMA) \/ {(aTrain |-> aRearMA)}
    END;
    
    SetTracksGhostTimer(aTrackside,aTrackGhostTimer) = 
    PRE	aTrackside <: Trackside &
        aTrackGhostTimer : TimerValuesDSL 
        
    THEN 
        TrackGhostTimer := TrackGhostTimer <+ (aTrackside * {aTrackGhostTimer})
    END;
    
    SetVsssDisconnectTimer(aVirtualBlock,aVssDisconnectTimer) = 
    PRE	aVirtualBlock <: VirtualBlock &
        aVssDisconnectTimer : TimerValuesDSL
        
    THEN 
        VssDisconnectTimer := VssDisconnectTimer <+ (aVirtualBlock * {aVssDisconnectTimer})
        
    END; 
    
    SetPreviousVssFrontStatuses(aTrain,aPreviousVssFrontStatus) = 
    PRE	aTrain <: Train &
        aPreviousVssFrontStatus : VSSStatus
        
    THEN 
        //	previousVssFrontStatus := ({aTrain} <<| previousVssFrontStatus)  \/ {(aTrain |-> aPreviousVssFrontStatus)}
        previousVssFrontStatus := previousVssFrontStatus <+(aTrain * {aPreviousVssFrontStatus})
    END;
    
    SetVsssStatus(aVirtualBlock,aVssStatus) = 
    PRE	aVirtualBlock <: VirtualBlock &
        aVssStatus : VSSStatus
        
    THEN 
        //	VssStatus := ({aVirtualBlock} <<| VssStatus)  \/ {(aVirtualBlock |-> aVssStatus)}
        VssStatus := VssStatus <+ (aVirtualBlock * {aVssStatus}) 
        
    END; 
    
    UpdatePreviousVssFronts(updatedPreviousVssFront) = 
    PRE	updatedPreviousVssFront : Train +-> VirtualBlock 
        
        
    THEN 
        
        previousVssFront:= previousVssFront <+ updatedPreviousVssFront
        
    END;
    
    
    SetTracksStatus(aTrackside,aTrackStatus) = 
    PRE	aTrackside <: Trackside &
        aTrackStatus : Status
        
    THEN 
        //TrackStatus := (aTrackside <<| TrackStatus)  \/ aTrackside * {aTrackStatus}
        //  TrackStatus := (aTrackside * {aTrackStatus}) \/ ((Trackside - aTrackside)*(Status - {aTrackStatus}))
        TrackStatus:= TrackStatus <+ (aTrackside* {aTrackStatus}) 
    END;
    
    UnsetConnectedTrains(value) = 
    PRE value : KindsOfTrains 
    THEN
        Connected := dom(KindOfTrain|>{value}) <<| Connected
    END;
    UnsetTrainsReConnected(value) = 
    PRE value : KindsOfTrains	
    THEN 
        TrainReConnected := dom(KindOfTrain|>{value}) <<| TrainReConnected
    END;
    
    UnsetTrainsMuteTimer(value) = 
    PRE value : KindsOfTrains
        
    THEN 
        TrainMuteTimer := dom(KindOfTrain|>{value}) <<| TrainMuteTimer
    END;
    
    UnsetTrainsWaitIntegrityTimer(value) = 
    PRE value : KindsOfTrains
        
    THEN 
        TrainWaitIntegrityTimer := dom(KindOfTrain|>{value}) <<| TrainWaitIntegrityTimer
    END;
    
    
    
    UnsetFronts(aTrain) = 
    PRE	aTrain <: Train
        
    THEN 
        TrainFront := aTrain <<| TrainFront
    END;
    UnsetRears(aTrain) = 
    PRE	aTrain <: Train
        
    THEN 
        TrainRear := aTrain <<| TrainRear
    END;
    
    
    SetRearTrackLocation2(aTrain,aRearTrackLocation) = 
    PRE	aTrain : Train &
        aRearTrackLocation : Trackside 
        
        
    THEN 
        rearTrackLocation := ({aTrain} <<| rearTrackLocation) \/ {(aTrain |-> aRearTrackLocation)}
    END;
    
    SetRearVssLocation2(aTrain,aRearVssLocation) = 
    PRE	aTrain : Train &
        aRearVssLocation : VirtualBlock 
        
    THEN 
        rearVssLocation := ({aTrain} <<| rearVssLocation) \/ {(aTrain |-> aRearVssLocation)}
    END;
    
    SetVssRear2(aTrain,aVssRear) = 
    PRE	aTrain : Train &
        aVssRear : VirtualBlock 
    THEN 
        VssTrainRear := ({aTrain} <<| VssTrainRear) \/ {(aTrain |-> aVssRear)}
    END;
    
    SetVssFront2(aTrain,aVssFront) = 
    PRE	aTrain : Train &
        aVssFront : VirtualBlock 
    THEN 
        VssTrainFront := ({aTrain} <<| VssTrainFront) \/ {(aTrain |-> aVssFront)}
    END;
    
    SetFrontVssLocation2(aTrain,aFrontVssLocation) = 
    PRE	aTrain : Train &
        aFrontVssLocation : VirtualBlock 
    THEN 
        frontVssLocation := ({aTrain} <<| frontVssLocation) \/ {(aTrain |-> aFrontVssLocation)}
    END;
    
    SetFrontTrackLocation2(aTrain,aFrontTrackLocation) = 
    PRE	aTrain : Train &
        aFrontTrackLocation : Trackside
    THEN 
        frontTrackLocation := ({aTrain} <<| frontTrackLocation) \/ {(aTrain |-> aFrontTrackLocation)}
    END;
    
    SetFront2(aTrain,aFront) = 
    PRE	aTrain : Train &
        aFront : Trackside 
        
        
    THEN 
        TrainFront := ({aTrain} <<| TrainFront) \/ {(aTrain |-> aFront)}
    END;
    
    SetRear2(aTrain,aRear) = 
    PRE	aTrain : Train &
        aRear : Trackside 
        
        
    THEN 
        TrainRear := ({aTrain} <<| TrainRear) \/ {(aTrain |-> aRear)}
    END;
    
    
    UnsetTrainsLocationLengthChange(aTrain) = 
    PRE	aTrain <: Train
        
    THEN 
        LocationLengthChange := aTrain <<| LocationLengthChange
    END;
    
    /*SetAllVssStatusOccupied(aVirtualBlock,aVssStatus) = 
    PRE	aVirtualBlock <: VirtualBlock &
    aVssStatus : VSSStatus
    
    THEN 
    
    VssStatus := (aVirtualBlock <<| VssStatus)  \/ (aVirtualBlock |-> aVssStatus)
    END;*/
    
    UnsetTrainsPreviousVssFrontStatus(aTrain) = 
    PRE	aTrain <: Train
        
    THEN 
        previousVssFrontStatus := aTrain <<| previousVssFrontStatus
    END;
    
    /*
    * End of user code
	 */
	
	
	result <-- Trackside_GetPrevious(aTrackside) = 
	PRE	aTrackside : Trackside &
		aTrackside : dom(previous_next)
		
	THEN 
		result := previous_next[{aTrackside}]
	END;

	result <-- Trackside_GetNext(aTrackside) = 
	PRE	aTrackside : Trackside &
		aTrackside : ran(previous_next)
		
	THEN 
		result := previous_next~[{aTrackside}]
	END;

	result <-- GetFrontOfTrain(aTrackside) = 
	PRE	aTrackside : Trackside &
		aTrackside : ran(TrainFront)
		
	THEN 
		result := TrainFront~[{aTrackside}]
	END;

	result <-- GetRearOfTrain(aTrackside) = 
	PRE	aTrackside : Trackside &
		aTrackside : ran(TrainRear)
		
	THEN 
		result := TrainRear~[{aTrackside}]
	END;

	result <-- GetVirtualblock(aTrackside) = 
	PRE	aTrackside : Trackside &
		aTrackside : ran(virtualBlockToTrackside)
		
	THEN 
		result := virtualBlockToTrackside~[{aTrackside}]
	END;

	result <-- GetFront(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainFront)
		
	THEN 
		result := TrainFront(aTrain)
	END;

	result <-- GetRear(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainRear)
		
	THEN 
		result := TrainRear(aTrain)
	END;

	result <-- GetVssRear(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(VssTrainRear)
		
	THEN 
		result := VssTrainRear(aTrain)
	END;

	result <-- GetVssFront(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(VssTrainFront)
		
	THEN 
		result := VssTrainFront(aTrain)
	END;

	result <-- GetFrontTrackLocation(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(frontTrackLocation)
		
	THEN 
		result := frontTrackLocation(aTrain)
	END;

	result <-- GetRearTrackLocation(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(rearTrackLocation)
		
	THEN 
		result := rearTrackLocation(aTrain)
	END;

	result <-- GetFrontVssLocation(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(frontVssLocation)
		
	THEN 
		result := frontVssLocation(aTrain)
	END;

	result <-- GetRearVssLocation(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(rearVssLocation)
		
	THEN 
		result := rearVssLocation(aTrain)
	END;

	result <-- GetFrontMA(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(frontMA)
		
	THEN 
		result := frontMA(aTrain)
	END;

	result <-- GetRearMA(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(rearMA)
		
	THEN 
		result := rearMA(aTrain)
	END;

	result <-- GetPreviousVssFront(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(previousVssFront)
		
	THEN 
		result := previousVssFront(aTrain)
	END;

	result <-- GetVssRearOfTrain(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVirtualBlock : ran(VssTrainRear)
		
	THEN 
		result := VssTrainRear~[{aVirtualBlock}]
	END;

	result <-- GetVssFrontOfTrain(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVirtualBlock : ran(VssTrainFront)
		
	THEN 
		result := VssTrainFront~[{aVirtualBlock}]
	END;

	result <-- GetTrackside(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVirtualBlock : dom(virtualBlockToTrackside)
		
	THEN 
		result := virtualBlockToTrackside(aVirtualBlock)
	END;

	result <-- VirtualBlock_GetNext(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVirtualBlock : dom(previous_next_vb)
		
	THEN 
		result := previous_next_vb(aVirtualBlock)
	END;

	result <-- VirtualBlock_GetPrevious(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVirtualBlock : ran(previous_next_vb)
		
	THEN 
		result := previous_next_vb~(aVirtualBlock)
	END;

	SetFrontOfTrain(aTrackside,theFrontOfTrain) = 
	PRE	aTrackside : Trackside &
		theFrontOfTrain : FIN(Train) &
		(theFrontOfTrain * {aTrackside}) /<: TrainFront &
		!added.( added : theFrontOfTrain => TrainFront[{added}] = {})
		
	THEN 
		TrainFront := (TrainFront |>> {aTrackside}) \/ (theFrontOfTrain * {aTrackside})
	END;

	SetRearOfTrain(aTrackside,theRearOfTrain) = 
	PRE	aTrackside : Trackside &
		theRearOfTrain : FIN(Train) &
		(theRearOfTrain * {aTrackside}) /<: TrainRear &
		!added.( added : theRearOfTrain => TrainRear[{added}] = {})
		
	THEN 
		TrainRear := (TrainRear |>> {aTrackside}) \/ (theRearOfTrain * {aTrackside})
	END;

	SetFront(aTrain,aFront) = 
	PRE	aTrain : Train &
		aFront : Trackside &
		{(aTrain |-> aFront)} /<: TrainFront
		
	THEN 
		TrainFront := ({aTrain} <<| TrainFront) \/ {(aTrain |-> aFront)}
	END;

	SetRear(aTrain,aRear) = 
	PRE	aTrain : Train &
		aRear : Trackside &
		{(aTrain |-> aRear)} /<: TrainRear
		
	THEN 
		TrainRear := ({aTrain} <<| TrainRear) \/ {(aTrain |-> aRear)}
	END;

	SetVssRear(aTrain,aVssRear) = 
	PRE	aTrain : Train &
		aVssRear : VirtualBlock &
		{(aTrain |-> aVssRear)} /<: VssTrainRear
		
	THEN 
		VssTrainRear := ({aTrain} <<| VssTrainRear) \/ {(aTrain |-> aVssRear)}
	END;

	SetVssFront(aTrain,aVssFront) = 
	PRE	aTrain : Train &
		aVssFront : VirtualBlock &
		{(aTrain |-> aVssFront)} /<: VssTrainFront
		
	THEN 
		VssTrainFront := ({aTrain} <<| VssTrainFront) \/ {(aTrain |-> aVssFront)}
	END;

	SetFrontTrackLocation(aTrain,aFrontTrackLocation) = 
	PRE	aTrain : Train &
		aFrontTrackLocation : Trackside &
		{(aTrain |-> aFrontTrackLocation)} /<: frontTrackLocation
		
	THEN 
		frontTrackLocation := ({aTrain} <<| frontTrackLocation) \/ {(aTrain |-> aFrontTrackLocation)}
	END;

	SetRearTrackLocation(aTrain,aRearTrackLocation) = 
	PRE	aTrain : Train &
		aRearTrackLocation : Trackside &
		{(aTrain |-> aRearTrackLocation)} /<: rearTrackLocation
		
	THEN 
		rearTrackLocation := ({aTrain} <<| rearTrackLocation) \/ {(aTrain |-> aRearTrackLocation)}
	END;

	SetFrontVssLocation(aTrain,aFrontVssLocation) = 
	PRE	aTrain : Train &
		aFrontVssLocation : VirtualBlock &
		{(aTrain |-> aFrontVssLocation)} /<: frontVssLocation
		
	THEN 
		frontVssLocation := ({aTrain} <<| frontVssLocation) \/ {(aTrain |-> aFrontVssLocation)}
	END;

	SetRearVssLocation(aTrain,aRearVssLocation) = 
	PRE	aTrain : Train &
		aRearVssLocation : VirtualBlock &
		{(aTrain |-> aRearVssLocation)} /<: rearVssLocation
		
	THEN 
		rearVssLocation := ({aTrain} <<| rearVssLocation) \/ {(aTrain |-> aRearVssLocation)}
	END;

	SetFrontMA(aTrain,aFrontMA) = 
	PRE	aTrain : Train &
		aFrontMA : VirtualBlock &
		{(aTrain |-> aFrontMA)} /<: frontMA
		
	THEN 
		frontMA := ({aTrain} <<| frontMA) \/ {(aTrain |-> aFrontMA)}
	END;

	SetRearMA(aTrain,aRearMA) = 
	PRE	aTrain : Train &
		aRearMA : VirtualBlock &
		{(aTrain |-> aRearMA)} /<: rearMA
		
	THEN 
		rearMA := ({aTrain} <<| rearMA) \/ {(aTrain |-> aRearMA)}
	END;

	SetPreviousVssFront(aTrain,aPreviousVssFront) = 
	PRE	aTrain : Train &
		aPreviousVssFront : VirtualBlock &
		{(aTrain |-> aPreviousVssFront)} /<: previousVssFront
		
	THEN 
		previousVssFront := ({aTrain} <<| previousVssFront) \/ {(aTrain |-> aPreviousVssFront)}
	END;

	SetVssRearOfTrain(aVirtualBlock,theVssRearOfTrain) = 
	PRE	aVirtualBlock : VirtualBlock &
		theVssRearOfTrain : FIN(Train) &
		(theVssRearOfTrain * {aVirtualBlock}) /<: VssTrainRear &
		!added.( added : theVssRearOfTrain => VssTrainRear[{added}] = {})
		
	THEN 
		VssTrainRear := (VssTrainRear |>> {aVirtualBlock}) \/ (theVssRearOfTrain * {aVirtualBlock})
	END;

	SetVssFrontOfTrain(aVirtualBlock,theVssFrontOfTrain) = 
	PRE	aVirtualBlock : VirtualBlock &
		theVssFrontOfTrain : FIN(Train) &
		(theVssFrontOfTrain * {aVirtualBlock}) /<: VssTrainFront &
		!added.( added : theVssFrontOfTrain => VssTrainFront[{added}] = {})
		
	THEN 
		VssTrainFront := (VssTrainFront |>> {aVirtualBlock}) \/ (theVssFrontOfTrain * {aVirtualBlock})
	END;

	UnsetFrontOfTrain(aTrackside) = 
	PRE	aTrackside : Trackside
		
	THEN 
		TrainFront := TrainFront |>> {aTrackside}
	END;

	UnsetRearOfTrain(aTrackside) = 
	PRE	aTrackside : Trackside
		
	THEN 
		TrainRear := TrainRear |>> {aTrackside}
	END;

	UnsetFront(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainFront := {aTrain} <<| TrainFront
	END;

	UnsetRear(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainRear := {aTrain} <<| TrainRear
	END;

	UnsetVssRear(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		VssTrainRear := {aTrain} <<| VssTrainRear
	END;

	UnsetVssFront(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		VssTrainFront := {aTrain} <<| VssTrainFront
	END;

	UnsetFrontTrackLocation(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		frontTrackLocation := {aTrain} <<| frontTrackLocation
	END;

	UnsetRearTrackLocation(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		rearTrackLocation := {aTrain} <<| rearTrackLocation
	END;

	UnsetFrontVssLocation(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		frontVssLocation := {aTrain} <<| frontVssLocation
	END;

	UnsetRearVssLocation(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		rearVssLocation := {aTrain} <<| rearVssLocation
	END;

	UnsetFrontMA(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		frontMA := {aTrain} <<| frontMA
	END;

	UnsetRearMA(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		rearMA := {aTrain} <<| rearMA
	END;

	UnsetPreviousVssFront(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		previousVssFront := {aTrain} <<| previousVssFront
	END;

	UnsetVssRearOfTrain(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock
		
	THEN 
		VssTrainRear := VssTrainRear |>> {aVirtualBlock}
	END;

	UnsetVssFrontOfTrain(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock
		
	THEN 
		VssTrainFront := VssTrainFront |>> {aVirtualBlock}
	END;

	AddFrontOfTrain(aTrackside,aFrontOfTrain) = 
	PRE	aTrackside : Trackside &
		aFrontOfTrain : Train &
		(aFrontOfTrain |-> aTrackside) /: TrainFront &
		TrainFront[{aFrontOfTrain}] = {}
		
	THEN 
		TrainFront := TrainFront \/ {(aFrontOfTrain |-> aTrackside)}
	END;

	AddRearOfTrain(aTrackside,aRearOfTrain) = 
	PRE	aTrackside : Trackside &
		aRearOfTrain : Train &
		(aRearOfTrain |-> aTrackside) /: TrainRear &
		TrainRear[{aRearOfTrain}] = {}
		
	THEN 
		TrainRear := TrainRear \/ {(aRearOfTrain |-> aTrackside)}
	END;

	AddVssRearOfTrain(aVirtualBlock,aVssRearOfTrain) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssRearOfTrain : Train &
		(aVssRearOfTrain |-> aVirtualBlock) /: VssTrainRear &
		VssTrainRear[{aVssRearOfTrain}] = {}
		
	THEN 
		VssTrainRear := VssTrainRear \/ {(aVssRearOfTrain |-> aVirtualBlock)}
	END;

	AddVssFrontOfTrain(aVirtualBlock,aVssFrontOfTrain) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssFrontOfTrain : Train &
		(aVssFrontOfTrain |-> aVirtualBlock) /: VssTrainFront &
		VssTrainFront[{aVssFrontOfTrain}] = {}
		
	THEN 
		VssTrainFront := VssTrainFront \/ {(aVssFrontOfTrain |-> aVirtualBlock)}
	END;

	RemoveFrontOfTrain(aTrackside,aFrontOfTrain) = 
	PRE	aTrackside : Trackside &
		aFrontOfTrain : Train &
		(aFrontOfTrain |-> aTrackside) : TrainFront
		
	THEN 
		TrainFront := TrainFront - {(aFrontOfTrain |-> aTrackside)}
	END;

	RemoveRearOfTrain(aTrackside,aRearOfTrain) = 
	PRE	aTrackside : Trackside &
		aRearOfTrain : Train &
		(aRearOfTrain |-> aTrackside) : TrainRear
		
	THEN 
		TrainRear := TrainRear - {(aRearOfTrain |-> aTrackside)}
	END;

	RemoveFront(aTrain,aFront) = 
	PRE	aTrain : Train &
		aFront : Trackside &
		(aTrain |-> aFront) : TrainFront
		
	THEN 
		TrainFront := TrainFront - {(aTrain |-> aFront)}
	END;

	RemoveRear(aTrain,aRear) = 
	PRE	aTrain : Train &
		aRear : Trackside &
		(aTrain |-> aRear) : TrainRear
		
	THEN 
		TrainRear := TrainRear - {(aTrain |-> aRear)}
	END;

	RemoveVssRear(aTrain,aVssRear) = 
	PRE	aTrain : Train &
		aVssRear : VirtualBlock &
		(aTrain |-> aVssRear) : VssTrainRear
		
	THEN 
		VssTrainRear := VssTrainRear - {(aTrain |-> aVssRear)}
	END;

	RemoveVssFront(aTrain,aVssFront) = 
	PRE	aTrain : Train &
		aVssFront : VirtualBlock &
		(aTrain |-> aVssFront) : VssTrainFront
		
	THEN 
		VssTrainFront := VssTrainFront - {(aTrain |-> aVssFront)}
	END;

	RemoveFrontTrackLocation(aTrain,aFrontTrackLocation) = 
	PRE	aTrain : Train &
		aFrontTrackLocation : Trackside &
		(aTrain |-> aFrontTrackLocation) : frontTrackLocation
		
	THEN 
		frontTrackLocation := frontTrackLocation - {(aTrain |-> aFrontTrackLocation)}
	END;

	RemoveRearTrackLocation(aTrain,aRearTrackLocation) = 
	PRE	aTrain : Train &
		aRearTrackLocation : Trackside &
		(aTrain |-> aRearTrackLocation) : rearTrackLocation
		
	THEN 
		rearTrackLocation := rearTrackLocation - {(aTrain |-> aRearTrackLocation)}
	END;

	RemoveFrontVssLocation(aTrain,aFrontVssLocation) = 
	PRE	aTrain : Train &
		aFrontVssLocation : VirtualBlock &
		(aTrain |-> aFrontVssLocation) : frontVssLocation
		
	THEN 
		frontVssLocation := frontVssLocation - {(aTrain |-> aFrontVssLocation)}
	END;

	RemoveRearVssLocation(aTrain,aRearVssLocation) = 
	PRE	aTrain : Train &
		aRearVssLocation : VirtualBlock &
		(aTrain |-> aRearVssLocation) : rearVssLocation
		
	THEN 
		rearVssLocation := rearVssLocation - {(aTrain |-> aRearVssLocation)}
	END;

	RemoveFrontMA(aTrain,aFrontMA) = 
	PRE	aTrain : Train &
		aFrontMA : VirtualBlock &
		(aTrain |-> aFrontMA) : frontMA
		
	THEN 
		frontMA := frontMA - {(aTrain |-> aFrontMA)}
	END;

	RemoveRearMA(aTrain,aRearMA) = 
	PRE	aTrain : Train &
		aRearMA : VirtualBlock &
		(aTrain |-> aRearMA) : rearMA
		
	THEN 
		rearMA := rearMA - {(aTrain |-> aRearMA)}
	END;

	RemovePreviousVssFront(aTrain,aPreviousVssFront) = 
	PRE	aTrain : Train &
		aPreviousVssFront : VirtualBlock &
		(aTrain |-> aPreviousVssFront) : previousVssFront
		
	THEN 
		previousVssFront := previousVssFront - {(aTrain |-> aPreviousVssFront)}
	END;

	RemoveVssRearOfTrain(aVirtualBlock,aVssRearOfTrain) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssRearOfTrain : Train &
		(aVssRearOfTrain |-> aVirtualBlock) : VssTrainRear
		
	THEN 
		VssTrainRear := VssTrainRear - {(aVssRearOfTrain |-> aVirtualBlock)}
	END;

	RemoveVssFrontOfTrain(aVirtualBlock,aVssFrontOfTrain) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssFrontOfTrain : Train &
		(aVssFrontOfTrain |-> aVirtualBlock) : VssTrainFront
		
	THEN 
		VssTrainFront := VssTrainFront - {(aVssFrontOfTrain |-> aVirtualBlock)}
	END;

	result <-- GetSupervisionOfTrain(aRailway) = 
	PRE	aRailway : Railway &
		aRailway : dom(SupervisionOfTrain)
		
	THEN 
		result := SupervisionOfTrain(aRailway)
	END;

	result <-- GetTrackStatus(aTrackside) = 
	PRE	aTrackside : Trackside &
		aTrackside : dom(TrackStatus)
		
	THEN 
		result := TrackStatus(aTrackside)
	END;

	result <-- GetTrackGhostTimer(aTrackside) = 
	PRE	aTrackside : Trackside &
		aTrackside : dom(TrackGhostTimer)
		
	THEN 
		result := TrackGhostTimer(aTrackside)
	END;

	result <-- GetKindOfTrain(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(KindOfTrain)
		
	THEN 
		result := KindOfTrain(aTrain)
	END;

	result <-- GetConnected(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(Connected)
		
	THEN 
		result := Connected(aTrain)
	END;

	result <-- GetLocationLengthChange(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(LocationLengthChange)
		
	THEN 
		result := LocationLengthChange(aTrain)
	END;

	result <-- GetPreviousVssFrontStatus(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(previousVssFrontStatus)
		
	THEN 
		result := previousVssFrontStatus(aTrain)
	END;

	result <-- GetTrainMuteTimer(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainMuteTimer)
		
	THEN 
		result := TrainMuteTimer(aTrain)
	END;

	result <-- GetTrainWaitIntegrityTimer(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainWaitIntegrityTimer)
		
	THEN 
		result := TrainWaitIntegrityTimer(aTrain)
	END;

	result <-- GetTrainReConnected(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainReConnected)
		
	THEN 
		result := TrainReConnected(aTrain)
	END;

	result <-- GetVssStatus(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVirtualBlock : dom(VssStatus)
		
	THEN 
		result := VssStatus(aVirtualBlock)
	END;

	result <-- GetVssDisconnectTimer(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVirtualBlock : dom(VssDisconnectTimer)
		
	THEN 
		result := VssDisconnectTimer(aVirtualBlock)
	END;

	SetSupervisionOfTrain(aRailway,aSupervisionOfTrain) = 
	PRE	aRailway : Railway &
		aSupervisionOfTrain : SupervisionStatus
		
	THEN 
		SupervisionOfTrain := ({aRailway} <<| SupervisionOfTrain)  \/ {(aRailway |-> aSupervisionOfTrain)}
	END;

	SetTrackStatus(aTrackside,aTrackStatus) = 
	PRE	aTrackside : Trackside &
		aTrackStatus : Status
		
	THEN 
		TrackStatus := ({aTrackside} <<| TrackStatus)  \/ {(aTrackside |-> aTrackStatus)}
	END;

	SetTrackGhostTimer(aTrackside,aTrackGhostTimer) = 
	PRE	aTrackside : Trackside &
		aTrackGhostTimer : TimerValuesDSL
		
	THEN 
		TrackGhostTimer := ({aTrackside} <<| TrackGhostTimer)  \/ {(aTrackside |-> aTrackGhostTimer)}
	END;

	SetConnected(aTrain,aConnected) = 
	PRE	aTrain : Train &
		aConnected : BOOL
		
	THEN 
		Connected := ({aTrain} <<| Connected)  \/ {(aTrain |-> aConnected)}
	END;

	SetLocationLengthChange(aTrain,aLocationLengthChange) = 
	PRE	aTrain : Train &
		aLocationLengthChange : BOOL
		
	THEN 
		LocationLengthChange := ({aTrain} <<| LocationLengthChange)  \/ {(aTrain |-> aLocationLengthChange)}
	END;

	SetPreviousVssFrontStatus(aTrain,aPreviousVssFrontStatus) = 
	PRE	aTrain : Train &
		aPreviousVssFrontStatus : VSSStatus
		
	THEN 
		previousVssFrontStatus := ({aTrain} <<| previousVssFrontStatus)  \/ {(aTrain |-> aPreviousVssFrontStatus)}
	END;

	SetTrainMuteTimer(aTrain,aTrainMuteTimer) = 
	PRE	aTrain : Train &
		aTrainMuteTimer : TimerValuesDSL
		
	THEN 
		TrainMuteTimer := ({aTrain} <<| TrainMuteTimer)  \/ {(aTrain |-> aTrainMuteTimer)}
	END;

	SetTrainWaitIntegrityTimer(aTrain,aTrainWaitIntegrityTimer) = 
	PRE	aTrain : Train &
		aTrainWaitIntegrityTimer : TimerValuesDSL
		
	THEN 
		TrainWaitIntegrityTimer := ({aTrain} <<| TrainWaitIntegrityTimer)  \/ {(aTrain |-> aTrainWaitIntegrityTimer)}
	END;

	SetTrainReConnected(aTrain,aTrainReConnected) = 
	PRE	aTrain : Train &
		aTrainReConnected : BOOL
		
	THEN 
		TrainReConnected := ({aTrain} <<| TrainReConnected)  \/ {(aTrain |-> aTrainReConnected)}
	END;

	SetVssStatus(aVirtualBlock,aVssStatus) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssStatus : VSSStatus
		
	THEN 
		VssStatus := ({aVirtualBlock} <<| VssStatus)  \/ {(aVirtualBlock |-> aVssStatus)}
	END;

	SetVssDisconnectTimer(aVirtualBlock,aVssDisconnectTimer) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssDisconnectTimer : TimerValuesDSL
		
	THEN 
		VssDisconnectTimer := ({aVirtualBlock} <<| VssDisconnectTimer)  \/ {(aVirtualBlock |-> aVssDisconnectTimer)}
	END;

	UnsetSupervisionOfTrain(aRailway) = 
	PRE	aRailway : Railway
		
	THEN 
		SupervisionOfTrain := {aRailway} <<| SupervisionOfTrain
	END;

	UnsetTrackStatus(aTrackside) = 
	PRE	aTrackside : Trackside
		
	THEN 
		TrackStatus := {aTrackside} <<| TrackStatus
	END;

	UnsetTrackGhostTimer(aTrackside) = 
	PRE	aTrackside : Trackside
		
	THEN 
		TrackGhostTimer := {aTrackside} <<| TrackGhostTimer
	END;

	UnsetConnected(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		Connected := {aTrain} <<| Connected
	END;

	UnsetLocationLengthChange(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		LocationLengthChange := {aTrain} <<| LocationLengthChange
	END;

	UnsetPreviousVssFrontStatus(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		previousVssFrontStatus := {aTrain} <<| previousVssFrontStatus
	END;

	UnsetTrainMuteTimer(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainMuteTimer := {aTrain} <<| TrainMuteTimer
	END;

	UnsetTrainWaitIntegrityTimer(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainWaitIntegrityTimer := {aTrain} <<| TrainWaitIntegrityTimer
	END;

	UnsetTrainReConnected(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainReConnected := {aTrain} <<| TrainReConnected
	END;

	UnsetVssStatus(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock
		
	THEN 
		VssStatus := {aVirtualBlock} <<| VssStatus
	END;

	UnsetVssDisconnectTimer(aVirtualBlock) = 
	PRE	aVirtualBlock : VirtualBlock
		
	THEN 
		VssDisconnectTimer := {aVirtualBlock} <<| VssDisconnectTimer
	END;

	RemoveSupervisionOfTrain(aRailway,aSupervisionOfTrain) = 
	PRE	aRailway : Railway &
		aSupervisionOfTrain : SupervisionStatus &
		{(aRailway |-> aSupervisionOfTrain)} <: SupervisionOfTrain
		
	THEN 
		SupervisionOfTrain := SupervisionOfTrain - {(aRailway |-> aSupervisionOfTrain)}
	END;

	RemoveTrackStatus(aTrackside,aTrackStatus) = 
	PRE	aTrackside : Trackside &
		aTrackStatus : Status &
		{(aTrackside |-> aTrackStatus)} <: TrackStatus
		
	THEN 
		TrackStatus := TrackStatus - {(aTrackside |-> aTrackStatus)}
	END;

	RemoveTrackGhostTimer(aTrackside,aTrackGhostTimer) = 
	PRE	aTrackside : Trackside &
		aTrackGhostTimer : TimerValuesDSL &
		{(aTrackside |-> aTrackGhostTimer)} <: TrackGhostTimer
		
	THEN 
		TrackGhostTimer := TrackGhostTimer - {(aTrackside |-> aTrackGhostTimer)}
	END;

	RemoveConnected(aTrain,aConnected) = 
	PRE	aTrain : Train &
		aConnected : BOOL &
		{(aTrain |-> aConnected)} <: Connected
		
	THEN 
		Connected := Connected - {(aTrain |-> aConnected)}
	END;

	RemoveLocationLengthChange(aTrain,aLocationLengthChange) = 
	PRE	aTrain : Train &
		aLocationLengthChange : BOOL &
		{(aTrain |-> aLocationLengthChange)} <: LocationLengthChange
		
	THEN 
		LocationLengthChange := LocationLengthChange - {(aTrain |-> aLocationLengthChange)}
	END;

	RemovePreviousVssFrontStatus(aTrain,aPreviousVssFrontStatus) = 
	PRE	aTrain : Train &
		aPreviousVssFrontStatus : VSSStatus &
		{(aTrain |-> aPreviousVssFrontStatus)} <: previousVssFrontStatus
		
	THEN 
		previousVssFrontStatus := previousVssFrontStatus - {(aTrain |-> aPreviousVssFrontStatus)}
	END;

	RemoveTrainMuteTimer(aTrain,aTrainMuteTimer) = 
	PRE	aTrain : Train &
		aTrainMuteTimer : TimerValuesDSL &
		{(aTrain |-> aTrainMuteTimer)} <: TrainMuteTimer
		
	THEN 
		TrainMuteTimer := TrainMuteTimer - {(aTrain |-> aTrainMuteTimer)}
	END;

	RemoveTrainWaitIntegrityTimer(aTrain,aTrainWaitIntegrityTimer) = 
	PRE	aTrain : Train &
		aTrainWaitIntegrityTimer : TimerValuesDSL &
		{(aTrain |-> aTrainWaitIntegrityTimer)} <: TrainWaitIntegrityTimer
		
	THEN 
		TrainWaitIntegrityTimer := TrainWaitIntegrityTimer - {(aTrain |-> aTrainWaitIntegrityTimer)}
	END;

	RemoveTrainReConnected(aTrain,aTrainReConnected) = 
	PRE	aTrain : Train &
		aTrainReConnected : BOOL &
		{(aTrain |-> aTrainReConnected)} <: TrainReConnected
		
	THEN 
		TrainReConnected := TrainReConnected - {(aTrain |-> aTrainReConnected)}
	END;

	RemoveVssStatus(aVirtualBlock,aVssStatus) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssStatus : VSSStatus &
		{(aVirtualBlock |-> aVssStatus)} <: VssStatus
		
	THEN 
		VssStatus := VssStatus - {(aVirtualBlock |-> aVssStatus)}
	END;

	RemoveVssDisconnectTimer(aVirtualBlock,aVssDisconnectTimer) = 
	PRE	aVirtualBlock : VirtualBlock &
		aVssDisconnectTimer : TimerValuesDSL &
		{(aVirtualBlock |-> aVssDisconnectTimer)} <: VssDisconnectTimer
		
	THEN 
		VssDisconnectTimer := VssDisconnectTimer - {(aVirtualBlock |-> aVssDisconnectTimer)}
	END


END
