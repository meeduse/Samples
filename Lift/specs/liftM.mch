
/*
 * This file was generated by Meeduse on Monday, February 7, 2022 at 10:49:31 AM CET
 */


MACHINE 
	
	liftM

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == liftM;
	

SETS
	
	LiftDirection = {Up,Down};
	DoorStatus = {Closed,Open};
	LIFT;
	FLOOR

ABSTRACT_VARIABLES
	
	Lift,
	Floor,
	liftPosition,
	up_down,
	selectedFloors,
	Direction,
	Door

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	Lift : FIN(LIFT) &
	Floor : FIN(FLOOR) &
	liftPosition : Lift --> Floor &
	up_down : Floor >+> Floor &
	selectedFloors : Lift <-> Floor &
	Direction : Lift --> LiftDirection &
	Door : Lift --> DoorStatus

INITIALISATION
	
	Lift := {} ||
	Floor := {} ||
	liftPosition := {} ||
	up_down := {} ||
	selectedFloors := {} ||
	Direction := {} ||
	Door := {}

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	Lift_NEW(aLift,aLiftPosition,aDirection,aDoor) = 
	PRE	aLift : LIFT &
		aLiftPosition : Floor &
		aDirection : LiftDirection &
		aDoor : DoorStatus &
		aLift /: Lift
		
	THEN 
		Lift := Lift \/ {aLift} ||
		liftPosition := liftPosition \/ {(aLift |-> aLiftPosition)} ||
		Direction := Direction \/ {(aLift |-> aDirection)} ||
		Door := Door \/ {(aLift |-> aDoor)}
	END;

	Floor_NEW(aFloor) = 
	PRE	aFloor : FLOOR &
		aFloor /: Floor
		
	THEN 
		Floor := Floor \/ {aFloor}
	END;

	Lift_Free(aLift) = 
	PRE	aLift : Lift
		
	THEN 
		Lift := Lift - {aLift} ||
		liftPosition := {aLift} <<| liftPosition ||
		selectedFloors := {aLift} <<| selectedFloors ||
		Direction := {aLift} <<| Direction ||
		Door := {aLift} <<| Door
	END;

	Floor_Free(aFloor) = 
	PRE	aFloor : Floor &
		liftPosition~[{aFloor}] = {}
		
	THEN 
		Floor := Floor - {aFloor} ||
		liftPosition := liftPosition |>> {aFloor} ||
		up_down := {aFloor} <<| (up_down |>> {aFloor}) ||
		selectedFloors := selectedFloors |>> {aFloor}
	END;

	result <-- GetLiftPosition(aLift) = 
	PRE	aLift : Lift &
		aLift : dom(liftPosition)
		
	THEN 
		result := liftPosition(aLift)
	END;

	result <-- GetSelectFloor(aLift) = 
	PRE	aLift : Lift &
		aLift : dom(selectedFloors)
		
	THEN 
		result := selectedFloors[{aLift}]
	END;

	result <-- GetLift(aFloor) = 
	PRE	aFloor : Floor &
		aFloor : ran(liftPosition)
		
	THEN 
		result := liftPosition~[{aFloor}]
	END;

	result <-- GetUp(aFloor) = 
	PRE	aFloor : Floor &
		aFloor : dom(up_down)
		
	THEN 
		result := up_down(aFloor)
	END;

	result <-- GetDown(aFloor) = 
	PRE	aFloor : Floor &
		aFloor : ran(up_down)
		
	THEN 
		result := up_down~(aFloor)
	END;

	result <-- GetSelecterLift(aFloor) = 
	PRE	aFloor : Floor &
		aFloor : ran(selectedFloors)
		
	THEN 
		result := selectedFloors~[{aFloor}]
	END;

	SetLiftPosition(aLift,aLiftPosition) = 
	PRE	aLift : Lift &
		aLiftPosition : Floor &
		{(aLift |-> aLiftPosition)} /<: liftPosition
		
	THEN 
		liftPosition := ({aLift} <<| liftPosition) \/ {(aLift |-> aLiftPosition)}
	END;

	SetSelectFloor(aLift,theSelectFloor) = 
	PRE	aLift : Lift &
		theSelectFloor : FIN(Floor) &
		({aLift} * theSelectFloor) /<: selectedFloors
		
	THEN 
		selectedFloors := ({aLift} <<| selectedFloors) \/ ({aLift} * theSelectFloor)
	END;

	SetLift(aFloor,theLift) = 
	PRE	aFloor : Floor &
		theLift : FIN(Lift) &
		(theLift * {aFloor}) /<: liftPosition &
		liftPosition~[{aFloor}] = {} &
		!added.( added : theLift => liftPosition[{added}] = {})
		
	THEN 
		liftPosition := (liftPosition |>> {aFloor}) \/ (theLift * {aFloor})
	END;

	SetUp(aFloor,aUp) = 
	PRE	aFloor : Floor &
		aUp : Floor &
		{(aFloor |-> aUp)} /<: up_down &
		up_down~[{aUp}] = {}
		
	THEN 
		up_down := ({aFloor} <<| up_down) \/ {(aFloor |-> aUp)}
	END;

	SetDown(aFloor,aDown) = 
	PRE	aFloor : Floor &
		aDown : Floor &
		{(aDown |-> aFloor)} /<: up_down &
		up_down[{aDown}] = {}
		
	THEN 
		up_down := (up_down |>> {aFloor}) \/ {(aDown |-> aFloor)}
	END;

	SetSelecterLift(aFloor,theSelecterLift) = 
	PRE	aFloor : Floor &
		theSelecterLift : FIN(Lift) &
		(theSelecterLift * {aFloor}) /<: selectedFloors
		
	THEN 
		selectedFloors := (selectedFloors |>> {aFloor}) \/ (theSelecterLift * {aFloor})
	END;

	UnsetSelectFloor(aLift) = 
	PRE	aLift : Lift
		
	THEN 
		selectedFloors := {aLift} <<| selectedFloors
	END;

	UnsetLift(aFloor) = 
	PRE	aFloor : Floor &
		liftPosition~[{aFloor}] = {}
		
	THEN 
		liftPosition := liftPosition |>> {aFloor}
	END;

	UnsetUp(aFloor) = 
	PRE	aFloor : Floor
		
	THEN 
		up_down := {aFloor} <<| up_down
	END;

	UnsetDown(aFloor) = 
	PRE	aFloor : Floor
		
	THEN 
		up_down := up_down |>> {aFloor}
	END;

	UnsetSelecterLift(aFloor) = 
	PRE	aFloor : Floor
		
	THEN 
		selectedFloors := selectedFloors |>> {aFloor}
	END;

	AddSelectFloor(aLift,aSelectFloor) = 
	PRE	aLift : Lift &
		aSelectFloor : Floor &
		(aLift |-> aSelectFloor) /: selectedFloors
		
	THEN 
		selectedFloors := selectedFloors \/ {(aLift |-> aSelectFloor)}
	END;

	AddLift(aFloor,aLift) = 
	PRE	aFloor : Floor &
		aLift : Lift &
		(aLift |-> aFloor) /: liftPosition &
		liftPosition[{aLift}] = {}
		
	THEN 
		liftPosition := liftPosition \/ {(aLift |-> aFloor)}
	END;

	AddSelecterLift(aFloor,aSelecterLift) = 
	PRE	aFloor : Floor &
		aSelecterLift : Lift &
		(aSelecterLift |-> aFloor) /: selectedFloors
		
	THEN 
		selectedFloors := selectedFloors \/ {(aSelecterLift |-> aFloor)}
	END;

	RemoveSelectFloor(aLift,aSelectFloor) = 
	PRE	aLift : Lift &
		aSelectFloor : Floor &
		(aLift |-> aSelectFloor) : selectedFloors
		
	THEN 
		selectedFloors := selectedFloors - {(aLift |-> aSelectFloor)}
	END;

	RemoveLift(aFloor,aLift) = 
	PRE	aFloor : Floor &
		aLift : Lift &
		(aLift |-> aFloor) : liftPosition &
		card(liftPosition[{aLift}]) >= 2
		
	THEN 
		liftPosition := liftPosition - {(aLift |-> aFloor)}
	END;

	RemoveUp(aFloor,aUp) = 
	PRE	aFloor : Floor &
		aUp : Floor &
		(aFloor |-> aUp) : up_down
		
	THEN 
		up_down := up_down - {(aFloor |-> aUp)}
	END;

	RemoveDown(aFloor,aDown) = 
	PRE	aFloor : Floor &
		aDown : Floor &
		(aDown |-> aFloor) : up_down
		
	THEN 
		up_down := up_down - {(aDown |-> aFloor)}
	END;

	RemoveSelecterLift(aFloor,aSelecterLift) = 
	PRE	aFloor : Floor &
		aSelecterLift : Lift &
		(aSelecterLift |-> aFloor) : selectedFloors
		
	THEN 
		selectedFloors := selectedFloors - {(aSelecterLift |-> aFloor)}
	END;

	result <-- GetDirection(aLift) = 
	PRE	aLift : Lift &
		aLift : dom(Direction)
		
	THEN 
		result := Direction(aLift)
	END;

	result <-- GetDoor(aLift) = 
	PRE	aLift : Lift &
		aLift : dom(Door)
		
	THEN 
		result := Door(aLift)
	END;

	SetDirection(aLift,aDirection) = 
	PRE	aLift : Lift &
		aDirection : LiftDirection
		
	THEN 
		Direction := ({aLift} <<| Direction)  \/ {(aLift |-> aDirection)}
	END;

	SetDoor(aLift,aDoor) = 
	PRE	aLift : Lift &
		aDoor : DoorStatus
		
	THEN 
		Door := ({aLift} <<| Door)  \/ {(aLift |-> aDoor)}
	END


END
