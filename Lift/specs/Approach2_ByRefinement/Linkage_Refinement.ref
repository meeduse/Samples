REFINEMENT
    	Linkage_Refinement
REFINES
    	Lift_Existing
INCLUDES
	    liftM
DEFINITIONS
    SET_PREF_SHOW_EVENTB_ANY_VALUES == TRUE ;
    SET_PREF_MAXINT == 10

     
    
PROPERTIES
    /*FLOOR: FIN(FLOOR) &*/
	groundf = 1 & /* Set to 1. */
	topf = card(FLOOR)  /* Set to cardinality of DSL-Spec. */
	

VARIABLES
	
	  /* Variable to link floors. */
	linked_lift,
	linked_floors
INVARIANT	
	
	/*& ran(linked_floors) = groundf..topf  hand written*/
	

	linked_lift : Lift /* generated */
	
	& linked_floors :  Floor >->>  groundf..topf /* generated */ 
	
	& !(f1,f2).(f1 : Floor & f2 : Floor & (f1|->f2) : up_down => linked_floors(f2) = linked_floors(f1) + 1)  /*hand written*/
	
    & (Door(linked_lift) = Closed => door_open = FALSE)
    & (Door(linked_lift) = Open => door_open = TRUE)
    
    & (Direction(linked_lift) = Down => direction_up = FALSE)
    & (Direction(linked_lift) = Up => direction_up = TRUE)

    & linked_floors[selectedFloors[{linked_lift}]] = call_buttons
    
    & linked_floors(liftPosition(linked_lift)) = cur_floor /*generated*/

INITIALISATION
    
   cur_floor := (groundf) ;
	door_open := FALSE ;
	call_buttons := ({}) ;
	direction_up := TRUE;
	
	linked_lift::Lift ; /* generated */

	ANY mapFloors WHERE 
		mapFloors : Floor >->>  groundf..topf  &
		!(f1,f2).(f1 : Floor & f2 : Floor & (f1|->f2) : up_down => mapFloors(f2) = mapFloors(f1) + 1)  
	THEN
		linked_floors := mapFloors
	END /* generated */ ; 
	IF
        	liftPosition(linked_lift) /= linked_floors~(cur_floor)
    	THEN
	    	SetLiftPosition(linked_lift,linked_floors~(cur_floor))
	END;
	SetDirection(linked_lift ,Up);
	SetDoor(linked_lift,Closed);
	UnsetSelectFloor(linked_lift)
	
	
	
	
OPERATIONS
 move_up = SELECT door_open = FALSE & cur_floor < topf & direction_up = TRUE &
             # cc.((cc : INTEGER) & ((cc : INTEGER) & (cc > cur_floor) & (cc : call_buttons))) &
            (cur_floor /: call_buttons) THEN
   cur_floor := ((cur_floor)+(1)); 
	SetLiftPosition(linked_lift ,linked_floors~(cur_floor)) 
 END ;
 move_down = SELECT door_open = FALSE & cur_floor > groundf & (direction_up = FALSE) &
       # cu.((cu : INTEGER) & ((cu : INTEGER) & (cu < cur_floor) & (cu : call_buttons))) &
      (cur_floor /: call_buttons) THEN
   cur_floor := ((cur_floor)-(1));  
	SetLiftPosition(linked_lift ,linked_floors~(cur_floor)) 
 END ;
 reverse_lift_up = SELECT direction_up = FALSE & door_open = FALSE &
   # cc.((cc : INTEGER) & ((cc : INTEGER) & (cc > cur_floor) & (cc : call_buttons))) & 
   ! ll.((ll : INTEGER) => (((ll : INTEGER) & (ll <= cur_floor) & (ll >= groundf)) => (ll /: call_buttons))) THEN
   direction_up := TRUE;
    SetDirection(linked_lift ,Up)
 END ;
 reverse_lift_down = SELECT direction_up = TRUE & door_open = FALSE & 
  # cd.(cd : INTEGER & ((cd : INTEGER) & (cd < cur_floor) & (cd : call_buttons))) & 
  ! uu.(uu : INTEGER => (((uu : INTEGER) & (uu >= cur_floor) & (uu <= topf)) => (uu /: call_buttons))) THEN
  direction_up := FALSE;
    SetDirection(linked_lift, Down)
 END ;
 open_door = SELECT door_open = FALSE & (cur_floor : call_buttons) THEN
    door_open := TRUE;
    SetDoor(linked_lift, Open)
 END ;
 close_door = SELECT door_open = TRUE THEN
    door_open := FALSE || call_buttons := ((call_buttons)-({cur_floor}));
    SetDoor(linked_lift,Closed) ;
    RemoveSelectFloor(linked_lift, linked_floors~(cur_floor))
 END ;
 push_call_button(fl) = PRE (fl : (groundf .. topf)) & (fl /: call_buttons) THEN 
     call_buttons := ((call_buttons)\/({fl}));
    AddSelectFloor(linked_lift, linked_floors~(fl))
 END
	
END


