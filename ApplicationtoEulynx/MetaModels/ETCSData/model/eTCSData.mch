
/*
 * This file was generated by Meeduse on Thursday, July 20, 2023 at 5:03:19 PM CEST
 */


MACHINE 
	
	eTCSData

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == eTCSData;
	
	/*
	 * Start of user code DEFINITIONS (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	

SETS
	
	KindOfTrains = {TIMSERTMS,ERTMS,NoERTMS};
	SupervisionStatus = {Active,Deactive};
	SectionVacancyTypes = {E_occupied,E_vacant,E_ambigious,E_unknown};
	ETCSMODEL;
	TRAIN;
	POSITIONINGNETELEMENT;
	POSITIONEDRELATION;
	ASSOCIATEDNETELEMENT;
	AREALOCATION;
	TRACKASSET;
	ROUTEBODYPROPERTY;
	DOCUMENTROOT;
	DATAPREPENTITIES;
	ASSETANDSTATE;
	RSMENTITIES;
	TOPOLOGY

CONSTANTS
	
	ETCSModel,
	Train,
	PositioningNetElement,
	PositionedRelation,
	AssociatedNetElement,
	AreaLocation,
	DocumentRoot,
	DataPrepEntities,
	RsmEntities,
	LinearElement,
	SectionList,
	SectionAndVacancy,
	TvpSection,
	TdsSection,
	TdsCompnent,
	VirtualSubSection,
	VssLimit,
	KindOfTrain,
	ElementARelation,
	ElementBRelation,
	ToNetElement,
	AreaAssociatedNetElements,
	TvpSectionLocation,
	ApplyTdsToTvp,
	LimitsTdsSection,
	HasSection,
	VacancyToTds

PROPERTIES
	
	ETCSModel : FIN(ETCSMODEL) &
	Train : FIN(TRAIN) &
	PositioningNetElement : FIN(POSITIONINGNETELEMENT) &
	PositionedRelation : FIN(POSITIONEDRELATION) &
	AssociatedNetElement : FIN(ASSOCIATEDNETELEMENT) &
	AreaLocation : FIN(AREALOCATION) &
	DocumentRoot : FIN(DOCUMENTROOT) &
	DataPrepEntities : FIN(DATAPREPENTITIES) &
	RsmEntities : FIN(RSMENTITIES) &
	LinearElement <: PositioningNetElement &
	SectionList <: ROUTEBODYPROPERTY &
	SectionAndVacancy <: ASSETANDSTATE &
	TvpSection <: TRACKASSET &
	TdsSection <: TRACKASSET &
	TdsCompnent <: TRACKASSET &
	VirtualSubSection <: TdsSection &
	VssLimit <: TdsCompnent &
	KindOfTrain : Train +-> KindOfTrains &
	ElementARelation : PositionedRelation --> PositioningNetElement &
	ElementBRelation : PositionedRelation --> PositioningNetElement &
	ToNetElement : AssociatedNetElement --> PositioningNetElement &
	AreaAssociatedNetElements : AssociatedNetElement +-> AreaLocation &
	TvpSectionLocation : TvpSection --> AreaLocation &
	ApplyTdsToTvp : TdsSection --> TvpSection &
	LimitsTdsSection : TdsCompnent <-> TdsSection &
	HasSection : SectionList <-> TvpSection &
	VacancyToTds : SectionAndVacancy >->> TdsSection

ABSTRACT_VARIABLES
	
	TrackAsset,
	RouteBodyProperty,
	AssetAndState,
	Topology,
	VirtualTrackAsset,
	PhysicalTrackAsset,
	VehiclePassageDetector,
	TrainFront,
	TrainRear,
	TrainRearLocation,
	TrainFrontLocation,
	frontMA,
	rearMA,
	ListOfTrains,
	EulynxModels,
	A_occupiesTdsSection_vehiclePassageDetector,
	A_ownsRouteBodyProperty_dataPrepEntities,
	A_ownsTrackAsset_dataPrepEntities,
	A_KnowsAssetAndState_dataPrepEntities,
	A_dataPrepEntities_documentRoot,
	A_usesPositionedRelation_topology,
	A_usesNetElement_topology,
	EtcsTopologies,
	A_rsmEntities_documentRoot,
	SupervisionOfTrain,
	TrainConnected,
	TrainReConnected,
	inVacancyState

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	TrackAsset : FIN(TRACKASSET) &
	RouteBodyProperty : FIN(ROUTEBODYPROPERTY) &
	AssetAndState : FIN(ASSETANDSTATE) &
	Topology : FIN(TOPOLOGY) &
	VirtualTrackAsset <: TrackAsset &
	PhysicalTrackAsset <: TrackAsset &
	VehiclePassageDetector <: PhysicalTrackAsset &
	TrainFront : Train <-> VirtualSubSection &
	TrainRear : Train <-> VirtualSubSection &
	TrainRearLocation : Train <-> VirtualSubSection &
	TrainFrontLocation : Train <-> VirtualSubSection &
	frontMA : Train +-> VirtualSubSection &
	rearMA : Train +-> VirtualSubSection &
	ListOfTrains : Train +-> ETCSModel &
	EulynxModels : ETCSModel +-> DocumentRoot &
	A_occupiesTdsSection_vehiclePassageDetector : VehiclePassageDetector +-> TdsSection &
	A_ownsRouteBodyProperty_dataPrepEntities : RouteBodyProperty +-> DataPrepEntities &
	A_ownsTrackAsset_dataPrepEntities : TrackAsset +-> DataPrepEntities &
	A_KnowsAssetAndState_dataPrepEntities : AssetAndState +-> DataPrepEntities &
	A_dataPrepEntities_documentRoot : DataPrepEntities +-> DocumentRoot &
	A_usesPositionedRelation_topology : PositionedRelation +-> Topology &
	A_usesNetElement_topology : PositioningNetElement +-> Topology &
	EtcsTopologies : RsmEntities >+> Topology &
	A_rsmEntities_documentRoot : RsmEntities +-> DocumentRoot &
	SupervisionOfTrain : ETCSModel +-> SupervisionStatus &
	TrainConnected : Train +-> BOOL &
	TrainReConnected : Train +-> BOOL &
	inVacancyState : SectionAndVacancy +-> SectionVacancyTypes &
	PhysicalTrackAsset /\ VirtualTrackAsset = {} &
	TdsSection /\ TvpSection = {} &
	dom(HasSection)=SectionList &
	SectionList <: RouteBodyProperty &
	SectionAndVacancy <: AssetAndState &
	TvpSection <: VirtualTrackAsset &
	TdsSection <: VirtualTrackAsset &
	TdsCompnent <: VehiclePassageDetector

INITIALISATION
	
	TrackAsset := {} ||
	RouteBodyProperty := {} ||
	AssetAndState := {} ||
	Topology := {} ||
	VirtualTrackAsset := {} ||
	PhysicalTrackAsset := {} ||
	VehiclePassageDetector := {} ||
	TrainFront := {} ||
	TrainRear := {} ||
	TrainRearLocation := {} ||
	TrainFrontLocation := {} ||
	frontMA := {} ||
	rearMA := {} ||
	ListOfTrains := {} ||
	EulynxModels := {} ||
	A_occupiesTdsSection_vehiclePassageDetector := {} ||
	A_ownsRouteBodyProperty_dataPrepEntities := {} ||
	A_ownsTrackAsset_dataPrepEntities := {} ||
	A_KnowsAssetAndState_dataPrepEntities := {} ||
	A_dataPrepEntities_documentRoot := {} ||
	A_usesPositionedRelation_topology := {} ||
	A_usesNetElement_topology := {} ||
	EtcsTopologies := {} ||
	A_rsmEntities_documentRoot := {} ||
	SupervisionOfTrain := {} ||
	TrainConnected := {} ||
	TrainReConnected := {} ||
	inVacancyState := {}

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	 
	 
	  ///////////////////////////////////////
	 
	 SetFrontMA2(aTrain,aFrontMA) = 
	PRE	aTrain : Train &
		aFrontMA : VirtualSubSection 
		
	THEN 
		frontMA := ({aTrain} <<| frontMA) \/ {(aTrain |-> aFrontMA)}
	END;

	SetRearMA2(aTrain,aRearMA) = 
	PRE	aTrain : Train &
		aRearMA : VirtualSubSection 
		
	THEN 
		rearMA := ({aTrain} <<| rearMA) \/ {(aTrain |-> aRearMA)}
	END;
	 
	 ////////////////////////////////////////
	 
	 
	 UnsetReConnectedTrains(value) = 
    PRE value : KindOfTrains 	
    THEN 
        TrainReConnected := dom(KindOfTrain|>{value}) <<| TrainReConnected
    END;
	 
	 //////////////////////////////////////////
	 
	 
	 SetVSSsVacancyStates(aVss,aInVacancyState) = 
	PRE	aVss <: VirtualSubSection  &
		aInVacancyState : SectionVacancyTypes
		
	THEN 
		LET  sectionsAndVacancy BE sectionsAndVacancy = dom (VacancyToTds |> aVss) IN
		    inVacancyState := (sectionsAndVacancy<<| inVacancyState)  \/ (sectionsAndVacancy* {aInVacancyState})
		END
	END;
	 
	 
	 //////////////////////////////
	 
	 SetVSSFrontLocation(aTrain,aVSS) = 
	PRE	aTrain : Train &
		aVSS : VirtualSubSection 
		
	THEN 
		TrainFrontLocation := ({aTrain} <<| TrainFrontLocation) \/ ({aTrain} * {aVSS})
	END;

	SetVSSRearLocation(aTrain,aVSS) = 
	PRE	aTrain : Train &
		aVSS : VirtualSubSection
		
	THEN 
		TrainRearLocation := ({aTrain} <<| TrainRearLocation) \/ ({aTrain} * {aVSS})
	END;
	 
	 //////////////////////////////////
	 
	 
	 SetVSSFront(aTrain,aVSS) = 
	PRE	aTrain : Train &
		aVSS : VirtualSubSection 
		
	THEN 
		TrainFront := ({aTrain} <<| TrainFront) \/ ({aTrain} * {aVSS})
	END;

	SetVSSRear(aTrain,aVSS) = 
	PRE	aTrain : Train &
		aVSS : VirtualSubSection
		
	THEN 
		TrainRear := ({aTrain} <<| TrainRear) \/ ({aTrain} * {aVSS})
	END;
	
	////////////////////////////
	 
	 
	 SetTvpSectionFrontLocation(aTrain,aTvp)=
    PRE aTrain : Train &
        aTvp : TvpSection 
        
        
    THEN 
		TrainFrontLocation := ({aTrain} <<| TrainFrontLocation) \/ {aTrain} * dom(ApplyTdsToTvp |> {aTvp})
	END;
	
	SetTvpSectionRearLocation(aTrain,aTvp)=
    PRE aTrain : Train &
        aTvp : TvpSection 
        
    THEN 
		TrainRearLocation := ({aTrain} <<| TrainRearLocation) \/ {aTrain} * dom(ApplyTdsToTvp |> {aTvp})
	END;
	
	/////////////////////////////////////////////
	 SetConnecteds(aTrains,aConnected) = 
    PRE	aTrains <: Train &
        aConnected : BOOL
        
    THEN 
        TrainConnected := TrainConnected  <+ aTrains * {aConnected}
    END;  
    
    //////////////////////////////////
	 
	 
	UnsetConnectedTrains(value) = 
    PRE value : KindOfTrains 
    THEN
        TrainConnected := dom(KindOfTrain|>{value}) <<| TrainConnected
    END;
    
    /////////////////////////
	
	SetVacancyStatus(value) = 
	PRE
		value : SectionVacancyTypes
		
	THEN 
		inVacancyState := inVacancyState <+ (SectionAndVacancy * {value})
	END;
	
	 
	 ////////////////////////////////////////////
	 
	 UnsetOccupyFronts(aTrain) = 
	PRE	aTrain <: Train
		
	THEN 
		TrainFront := aTrain <<| TrainFront
	END;

	UnsetOccupyRears(aTrain) = 
	PRE	aTrain <: Train
		
	THEN 
		TrainRear := aTrain <<| TrainRear
	END;
	
	///////////////////////////////////////////////////////////
	 
	SetTvpSectionVacancyState(aTvp,aInVacancyState) = 
	PRE	aTvp : TvpSection  &
		aInVacancyState : SectionVacancyTypes
		
	THEN 
		LET  sectionsAndVacancy BE sectionsAndVacancy = dom(VacancyToTds |> dom(ApplyTdsToTvp |> {aTvp})) IN
		    inVacancyState := (sectionsAndVacancy<<| inVacancyState)  \/ (sectionsAndVacancy * {aInVacancyState})
		END
	END;
	
	SetTvpSectionVacancyStates(aTvp,aInVacancyState) = 
	PRE	aTvp <: TvpSection  &
		aInVacancyState : SectionVacancyTypes
		
	THEN 
		LET  sectionsAndVacancy BE sectionsAndVacancy = dom(VacancyToTds |> dom(ApplyTdsToTvp |> aTvp)) IN
		    inVacancyState := (sectionsAndVacancy<<| inVacancyState)  \/ (sectionsAndVacancy* {aInVacancyState})
		END
	END;
	
	///////////////////////////////////////////////////
	
    SetTvpSectionFront(aTrain,aTvp)=
    PRE aTrain : Train &
        aTvp : TvpSection 
        
     //   aVirtualSubSection <: VirtualSubSection &
     //   {(aVirtualSubSection |-> aTvp)} <: ApplyTdsToTvp
        
       
        
    THEN 
		TrainFront := ({aTrain} <<| TrainFront) \/ {aTrain} * dom(ApplyTdsToTvp |> {aTvp})
	END;
	
	SetTvpSectionRear(aTrain,aTvp)=
    PRE aTrain : Train &
        aTvp : TvpSection 
        
     //   aVirtualSubSection <: VirtualSubSection &
     //   {(aVirtualSubSection |-> aTvp)} <: ApplyTdsToTvp
        
       
        
    THEN 
		TrainRear := ({aTrain} <<| TrainRear) \/ {aTrain} * dom(ApplyTdsToTvp |> {aTvp})
	END;
	
	
	//////////////////////////////////////////////
    
    SetOccupyFront2(aTrain,aOccupyFront) = 
	PRE	aTrain : Train &
		aOccupyFront : VirtualSubSection 
		
		
	THEN 
		TrainFront := ({aTrain} <<| TrainFront) \/ {(aTrain |-> aOccupyFront)}
	END;

	SetOccupyRear2(aTrain,aOccupyRear) = 
	PRE	aTrain : Train &
		aOccupyRear : VirtualSubSection 
		
		
	THEN 
		TrainRear := ({aTrain} <<| TrainRear) \/ {(aTrain |-> aOccupyRear)}
	END;
	/*
	 * End of user code
	 */
	
	
	Topology_NEW(aTopology) = 
	PRE	aTopology : TOPOLOGY &
		aTopology /: Topology
		
	THEN 
		Topology := Topology \/ {aTopology}
	END;

	Topology_Free(aTopology) = 
	PRE	aTopology : Topology
		
	THEN 
		Topology := Topology - {aTopology} ||
		A_usesPositionedRelation_topology := A_usesPositionedRelation_topology |>> {aTopology} ||
		A_usesNetElement_topology := A_usesNetElement_topology |>> {aTopology} ||
		EtcsTopologies := EtcsTopologies |>> {aTopology}
	END;

	result <-- GetTrains(aETCSModel) = 
	PRE	aETCSModel : ETCSModel &
		aETCSModel : ran(ListOfTrains)
		
	THEN 
		result := ListOfTrains~[{aETCSModel}]
	END;

	result <-- GetEulynxModel(aETCSModel) = 
	PRE	aETCSModel : ETCSModel &
		aETCSModel : dom(EulynxModels)
		
	THEN 
		result := EulynxModels(aETCSModel)
	END;

	result <-- GetOccupyFront(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainFront)
		
	THEN 
		result := TrainFront[{aTrain}]
	END;

	result <-- GetOccupyRear(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainRear)
		
	THEN 
		result := TrainRear[{aTrain}]
	END;

	result <-- GetLocationRear(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainRearLocation)
		
	THEN 
		result := TrainRearLocation[{aTrain}]
	END;

	result <-- GetLocationFront(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainFrontLocation)
		
	THEN 
		result := TrainFrontLocation[{aTrain}]
	END;

	result <-- GetFrontMA(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(frontMA)
		
	THEN 
		result := frontMA(aTrain)
	END;

	result <-- GetRearMA(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(rearMA)
		
	THEN 
		result := rearMA(aTrain)
	END;

	result <-- GetElementA(aPositionedRelation) = 
	PRE	aPositionedRelation : PositionedRelation &
		aPositionedRelation : dom(ElementARelation)
		
	THEN 
		result := ElementARelation(aPositionedRelation)
	END;

	result <-- GetElementB(aPositionedRelation) = 
	PRE	aPositionedRelation : PositionedRelation &
		aPositionedRelation : dom(ElementBRelation)
		
	THEN 
		result := ElementBRelation(aPositionedRelation)
	END;

	result <-- GetNetElement(aAssociatedNetElement) = 
	PRE	aAssociatedNetElement : AssociatedNetElement &
		aAssociatedNetElement : dom(ToNetElement)
		
	THEN 
		result := ToNetElement(aAssociatedNetElement)
	END;

	result <-- GetAssociatedNetElements(aAreaLocation) = 
	PRE	aAreaLocation : AreaLocation &
		aAreaLocation : ran(AreaAssociatedNetElements)
		
	THEN 
		result := AreaAssociatedNetElements~[{aAreaLocation}]
	END;

	result <-- GetIsLocatedAt(aTvpSection) = 
	PRE	aTvpSection : TvpSection &
		aTvpSection : dom(TvpSectionLocation)
		
	THEN 
		result := TvpSectionLocation(aTvpSection)
	END;

	result <-- GetAppliesToTvpsection(aTdsSection) = 
	PRE	aTdsSection : TdsSection &
		aTdsSection : dom(ApplyTdsToTvp)
		
	THEN 
		result := ApplyTdsToTvp(aTdsSection)
	END;

	result <-- GetLimitsTdsSection(aTdsCompnent) = 
	PRE	aTdsCompnent : TdsCompnent &
		aTdsCompnent : dom(LimitsTdsSection)
		
	THEN 
		result := LimitsTdsSection[{aTdsCompnent}]
	END;

	result <-- GetOccupiesTdsSection(aVehiclePassageDetector) = 
	PRE	aVehiclePassageDetector : VehiclePassageDetector &
		aVehiclePassageDetector : dom(A_occupiesTdsSection_vehiclePassageDetector)
		
	THEN 
		result := A_occupiesTdsSection_vehiclePassageDetector(aVehiclePassageDetector)
	END;

	result <-- GetHasSection(aSectionList) = 
	PRE	aSectionList : SectionList &
		aSectionList : dom(HasSection)
		
	THEN 
		result := HasSection[{aSectionList}]
	END;

	result <-- GetDataPrepEntities(aDocumentRoot) = 
	PRE	aDocumentRoot : DocumentRoot &
		aDocumentRoot : ran(A_dataPrepEntities_documentRoot)
		
	THEN 
		result := A_dataPrepEntities_documentRoot~[{aDocumentRoot}]
	END;

	result <-- GetRsmEntities(aDocumentRoot) = 
	PRE	aDocumentRoot : DocumentRoot &
		aDocumentRoot : ran(A_rsmEntities_documentRoot)
		
	THEN 
		result := A_rsmEntities_documentRoot~[{aDocumentRoot}]
	END;

	result <-- GetOwnsRouteBodyProperty(aDataPrepEntities) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aDataPrepEntities : ran(A_ownsRouteBodyProperty_dataPrepEntities)
		
	THEN 
		result := A_ownsRouteBodyProperty_dataPrepEntities~[{aDataPrepEntities}]
	END;

	result <-- GetOwnsTrackAsset(aDataPrepEntities) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aDataPrepEntities : ran(A_ownsTrackAsset_dataPrepEntities)
		
	THEN 
		result := A_ownsTrackAsset_dataPrepEntities~[{aDataPrepEntities}]
	END;

	result <-- GetKnowsAssetAndState(aDataPrepEntities) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aDataPrepEntities : ran(A_KnowsAssetAndState_dataPrepEntities)
		
	THEN 
		result := A_KnowsAssetAndState_dataPrepEntities~[{aDataPrepEntities}]
	END;

	result <-- GetUsesEtcsTopology(aRsmEntities) = 
	PRE	aRsmEntities : RsmEntities &
		aRsmEntities : dom(EtcsTopologies)
		
	THEN 
		result := EtcsTopologies(aRsmEntities)
	END;

	result <-- GetUsesPositionedRelation(aTopology) = 
	PRE	aTopology : Topology &
		aTopology : ran(A_usesPositionedRelation_topology)
		
	THEN 
		result := A_usesPositionedRelation_topology~[{aTopology}]
	END;

	result <-- GetUsesNetElement(aTopology) = 
	PRE	aTopology : Topology &
		aTopology : ran(A_usesNetElement_topology)
		
	THEN 
		result := A_usesNetElement_topology~[{aTopology}]
	END;

	result <-- GetRefersToTdsSection(aSectionAndVacancy) = 
	PRE	aSectionAndVacancy : SectionAndVacancy &
		aSectionAndVacancy : dom(VacancyToTds)
		
	THEN 
		result := VacancyToTds(aSectionAndVacancy)
	END;

	SetTrains(aETCSModel,theTrains) = 
	PRE	aETCSModel : ETCSModel &
		theTrains : FIN(Train) &
		(theTrains * {aETCSModel}) /<: ListOfTrains &
		!added.( added : theTrains => ListOfTrains[{added}] = {})
		
	THEN 
		ListOfTrains := (ListOfTrains |>> {aETCSModel}) \/ (theTrains * {aETCSModel})
	END;

	SetEulynxModel(aETCSModel,aEulynxModel) = 
	PRE	aETCSModel : ETCSModel &
		aEulynxModel : DocumentRoot &
		{(aETCSModel |-> aEulynxModel)} /<: EulynxModels
		
	THEN 
		EulynxModels := ({aETCSModel} <<| EulynxModels) \/ {(aETCSModel |-> aEulynxModel)}
	END;

	SetOccupyFront(aTrain,theOccupyFront) = 
	PRE	aTrain : Train &
		theOccupyFront : FIN(VirtualSubSection) &
		({aTrain} * theOccupyFront) /<: TrainFront
		
	THEN 
		TrainFront := ({aTrain} <<| TrainFront) \/ ({aTrain} * theOccupyFront)
	END;

	SetOccupyRear(aTrain,theOccupyRear) = 
	PRE	aTrain : Train &
		theOccupyRear : FIN(VirtualSubSection) &
		({aTrain} * theOccupyRear) /<: TrainRear
		
	THEN 
		TrainRear := ({aTrain} <<| TrainRear) \/ ({aTrain} * theOccupyRear)
	END;

	SetLocationRear(aTrain,theLocationRear) = 
	PRE	aTrain : Train &
		theLocationRear : FIN(VirtualSubSection) &
		({aTrain} * theLocationRear) /<: TrainRearLocation
		
	THEN 
		TrainRearLocation := ({aTrain} <<| TrainRearLocation) \/ ({aTrain} * theLocationRear)
	END;

	SetLocationFront(aTrain,theLocationFront) = 
	PRE	aTrain : Train &
		theLocationFront : FIN(VirtualSubSection) &
		({aTrain} * theLocationFront) /<: TrainFrontLocation
		
	THEN 
		TrainFrontLocation := ({aTrain} <<| TrainFrontLocation) \/ ({aTrain} * theLocationFront)
	END;

	SetFrontMA(aTrain,aFrontMA) = 
	PRE	aTrain : Train &
		aFrontMA : VirtualSubSection &
		{(aTrain |-> aFrontMA)} /<: frontMA
		
	THEN 
		frontMA := ({aTrain} <<| frontMA) \/ {(aTrain |-> aFrontMA)}
	END;

	SetRearMA(aTrain,aRearMA) = 
	PRE	aTrain : Train &
		aRearMA : VirtualSubSection &
		{(aTrain |-> aRearMA)} /<: rearMA
		
	THEN 
		rearMA := ({aTrain} <<| rearMA) \/ {(aTrain |-> aRearMA)}
	END;

	SetOccupiesTdsSection(aVehiclePassageDetector,aOccupiesTdsSection) = 
	PRE	aVehiclePassageDetector : VehiclePassageDetector &
		aOccupiesTdsSection : TdsSection &
		{(aVehiclePassageDetector |-> aOccupiesTdsSection)} /<: A_occupiesTdsSection_vehiclePassageDetector
		
	THEN 
		A_occupiesTdsSection_vehiclePassageDetector := ({aVehiclePassageDetector} <<| A_occupiesTdsSection_vehiclePassageDetector) \/ {(aVehiclePassageDetector |-> aOccupiesTdsSection)}
	END;

	SetDataPrepEntities(aDocumentRoot,theDataPrepEntities) = 
	PRE	aDocumentRoot : DocumentRoot &
		theDataPrepEntities : FIN(DataPrepEntities) &
		(theDataPrepEntities * {aDocumentRoot}) /<: A_dataPrepEntities_documentRoot &
		!added.( added : theDataPrepEntities => A_dataPrepEntities_documentRoot[{added}] = {})
		
	THEN 
		A_dataPrepEntities_documentRoot := (A_dataPrepEntities_documentRoot |>> {aDocumentRoot}) \/ (theDataPrepEntities * {aDocumentRoot})
	END;

	SetRsmEntities(aDocumentRoot,theRsmEntities) = 
	PRE	aDocumentRoot : DocumentRoot &
		theRsmEntities : FIN(RsmEntities) &
		(theRsmEntities * {aDocumentRoot}) /<: A_rsmEntities_documentRoot &
		!added.( added : theRsmEntities => A_rsmEntities_documentRoot[{added}] = {})
		
	THEN 
		A_rsmEntities_documentRoot := (A_rsmEntities_documentRoot |>> {aDocumentRoot}) \/ (theRsmEntities * {aDocumentRoot})
	END;

	SetOwnsRouteBodyProperty(aDataPrepEntities,theOwnsRouteBodyProperty) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		theOwnsRouteBodyProperty : FIN(RouteBodyProperty) &
		(theOwnsRouteBodyProperty * {aDataPrepEntities}) /<: A_ownsRouteBodyProperty_dataPrepEntities &
		!added.( added : theOwnsRouteBodyProperty => A_ownsRouteBodyProperty_dataPrepEntities[{added}] = {})
		
	THEN 
		A_ownsRouteBodyProperty_dataPrepEntities := (A_ownsRouteBodyProperty_dataPrepEntities |>> {aDataPrepEntities}) \/ (theOwnsRouteBodyProperty * {aDataPrepEntities})
	END;

	SetOwnsTrackAsset(aDataPrepEntities,theOwnsTrackAsset) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		theOwnsTrackAsset : FIN(TrackAsset) &
		(theOwnsTrackAsset * {aDataPrepEntities}) /<: A_ownsTrackAsset_dataPrepEntities &
		!added.( added : theOwnsTrackAsset => A_ownsTrackAsset_dataPrepEntities[{added}] = {})
		
	THEN 
		A_ownsTrackAsset_dataPrepEntities := (A_ownsTrackAsset_dataPrepEntities |>> {aDataPrepEntities}) \/ (theOwnsTrackAsset * {aDataPrepEntities})
	END;

	SetKnowsAssetAndState(aDataPrepEntities,theKnowsAssetAndState) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		theKnowsAssetAndState : FIN(AssetAndState) &
		(theKnowsAssetAndState * {aDataPrepEntities}) /<: A_KnowsAssetAndState_dataPrepEntities &
		!added.( added : theKnowsAssetAndState => A_KnowsAssetAndState_dataPrepEntities[{added}] = {})
		
	THEN 
		A_KnowsAssetAndState_dataPrepEntities := (A_KnowsAssetAndState_dataPrepEntities |>> {aDataPrepEntities}) \/ (theKnowsAssetAndState * {aDataPrepEntities})
	END;

	SetUsesEtcsTopology(aRsmEntities,aUsesEtcsTopology) = 
	PRE	aRsmEntities : RsmEntities &
		aUsesEtcsTopology : Topology &
		{(aRsmEntities |-> aUsesEtcsTopology)} /<: EtcsTopologies &
		EtcsTopologies~[{aUsesEtcsTopology}] = {}
		
	THEN 
		EtcsTopologies := ({aRsmEntities} <<| EtcsTopologies) \/ {(aRsmEntities |-> aUsesEtcsTopology)}
	END;

	SetUsesPositionedRelation(aTopology,theUsesPositionedRelation) = 
	PRE	aTopology : Topology &
		theUsesPositionedRelation : FIN(PositionedRelation) &
		(theUsesPositionedRelation * {aTopology}) /<: A_usesPositionedRelation_topology &
		!added.( added : theUsesPositionedRelation => A_usesPositionedRelation_topology[{added}] = {})
		
	THEN 
		A_usesPositionedRelation_topology := (A_usesPositionedRelation_topology |>> {aTopology}) \/ (theUsesPositionedRelation * {aTopology})
	END;

	SetUsesNetElement(aTopology,theUsesNetElement) = 
	PRE	aTopology : Topology &
		theUsesNetElement : FIN(PositioningNetElement) &
		(theUsesNetElement * {aTopology}) /<: A_usesNetElement_topology &
		!added.( added : theUsesNetElement => A_usesNetElement_topology[{added}] = {})
		
	THEN 
		A_usesNetElement_topology := (A_usesNetElement_topology |>> {aTopology}) \/ (theUsesNetElement * {aTopology})
	END;

	UnsetTrains(aETCSModel) = 
	PRE	aETCSModel : ETCSModel
		
	THEN 
		ListOfTrains := ListOfTrains |>> {aETCSModel}
	END;

	UnsetEulynxModel(aETCSModel) = 
	PRE	aETCSModel : ETCSModel
		
	THEN 
		EulynxModels := {aETCSModel} <<| EulynxModels
	END;

	UnsetOccupyFront(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainFront := {aTrain} <<| TrainFront
	END;

	UnsetOccupyRear(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainRear := {aTrain} <<| TrainRear
	END;

	UnsetLocationRear(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainRearLocation := {aTrain} <<| TrainRearLocation
	END;

	UnsetLocationFront(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainFrontLocation := {aTrain} <<| TrainFrontLocation
	END;

	UnsetFrontMA(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		frontMA := {aTrain} <<| frontMA
	END;

	UnsetRearMA(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		rearMA := {aTrain} <<| rearMA
	END;

	UnsetOccupiesTdsSection(aVehiclePassageDetector) = 
	PRE	aVehiclePassageDetector : VehiclePassageDetector
		
	THEN 
		A_occupiesTdsSection_vehiclePassageDetector := {aVehiclePassageDetector} <<| A_occupiesTdsSection_vehiclePassageDetector
	END;

	UnsetDataPrepEntities(aDocumentRoot) = 
	PRE	aDocumentRoot : DocumentRoot
		
	THEN 
		A_dataPrepEntities_documentRoot := A_dataPrepEntities_documentRoot |>> {aDocumentRoot}
	END;

	UnsetRsmEntities(aDocumentRoot) = 
	PRE	aDocumentRoot : DocumentRoot
		
	THEN 
		A_rsmEntities_documentRoot := A_rsmEntities_documentRoot |>> {aDocumentRoot}
	END;

	UnsetOwnsRouteBodyProperty(aDataPrepEntities) = 
	PRE	aDataPrepEntities : DataPrepEntities
		
	THEN 
		A_ownsRouteBodyProperty_dataPrepEntities := A_ownsRouteBodyProperty_dataPrepEntities |>> {aDataPrepEntities}
	END;

	UnsetOwnsTrackAsset(aDataPrepEntities) = 
	PRE	aDataPrepEntities : DataPrepEntities
		
	THEN 
		A_ownsTrackAsset_dataPrepEntities := A_ownsTrackAsset_dataPrepEntities |>> {aDataPrepEntities}
	END;

	UnsetKnowsAssetAndState(aDataPrepEntities) = 
	PRE	aDataPrepEntities : DataPrepEntities
		
	THEN 
		A_KnowsAssetAndState_dataPrepEntities := A_KnowsAssetAndState_dataPrepEntities |>> {aDataPrepEntities}
	END;

	UnsetUsesEtcsTopology(aRsmEntities) = 
	PRE	aRsmEntities : RsmEntities
		
	THEN 
		EtcsTopologies := {aRsmEntities} <<| EtcsTopologies
	END;

	UnsetUsesPositionedRelation(aTopology) = 
	PRE	aTopology : Topology
		
	THEN 
		A_usesPositionedRelation_topology := A_usesPositionedRelation_topology |>> {aTopology}
	END;

	UnsetUsesNetElement(aTopology) = 
	PRE	aTopology : Topology
		
	THEN 
		A_usesNetElement_topology := A_usesNetElement_topology |>> {aTopology}
	END;

	AddTrains(aETCSModel,aTrains) = 
	PRE	aETCSModel : ETCSModel &
		aTrains : Train &
		(aTrains |-> aETCSModel) /: ListOfTrains &
		ListOfTrains[{aTrains}] = {}
		
	THEN 
		ListOfTrains := ListOfTrains \/ {(aTrains |-> aETCSModel)}
	END;

	AddOccupyFront(aTrain,aOccupyFront) = 
	PRE	aTrain : Train &
		aOccupyFront : VirtualSubSection &
		(aTrain |-> aOccupyFront) /: TrainFront
		
	THEN 
		TrainFront := TrainFront \/ {(aTrain |-> aOccupyFront)}
	END;

	AddOccupyRear(aTrain,aOccupyRear) = 
	PRE	aTrain : Train &
		aOccupyRear : VirtualSubSection &
		(aTrain |-> aOccupyRear) /: TrainRear
		
	THEN 
		TrainRear := TrainRear \/ {(aTrain |-> aOccupyRear)}
	END;

	AddLocationRear(aTrain,aLocationRear) = 
	PRE	aTrain : Train &
		aLocationRear : VirtualSubSection &
		(aTrain |-> aLocationRear) /: TrainRearLocation
		
	THEN 
		TrainRearLocation := TrainRearLocation \/ {(aTrain |-> aLocationRear)}
	END;

	AddLocationFront(aTrain,aLocationFront) = 
	PRE	aTrain : Train &
		aLocationFront : VirtualSubSection &
		(aTrain |-> aLocationFront) /: TrainFrontLocation
		
	THEN 
		TrainFrontLocation := TrainFrontLocation \/ {(aTrain |-> aLocationFront)}
	END;

	AddDataPrepEntities(aDocumentRoot,aDataPrepEntities) = 
	PRE	aDocumentRoot : DocumentRoot &
		aDataPrepEntities : DataPrepEntities &
		(aDataPrepEntities |-> aDocumentRoot) /: A_dataPrepEntities_documentRoot &
		A_dataPrepEntities_documentRoot[{aDataPrepEntities}] = {}
		
	THEN 
		A_dataPrepEntities_documentRoot := A_dataPrepEntities_documentRoot \/ {(aDataPrepEntities |-> aDocumentRoot)}
	END;

	AddRsmEntities(aDocumentRoot,aRsmEntities) = 
	PRE	aDocumentRoot : DocumentRoot &
		aRsmEntities : RsmEntities &
		(aRsmEntities |-> aDocumentRoot) /: A_rsmEntities_documentRoot &
		A_rsmEntities_documentRoot[{aRsmEntities}] = {}
		
	THEN 
		A_rsmEntities_documentRoot := A_rsmEntities_documentRoot \/ {(aRsmEntities |-> aDocumentRoot)}
	END;

	AddOwnsRouteBodyProperty(aDataPrepEntities,aOwnsRouteBodyProperty) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aOwnsRouteBodyProperty : RouteBodyProperty &
		(aOwnsRouteBodyProperty |-> aDataPrepEntities) /: A_ownsRouteBodyProperty_dataPrepEntities &
		A_ownsRouteBodyProperty_dataPrepEntities[{aOwnsRouteBodyProperty}] = {}
		
	THEN 
		A_ownsRouteBodyProperty_dataPrepEntities := A_ownsRouteBodyProperty_dataPrepEntities \/ {(aOwnsRouteBodyProperty |-> aDataPrepEntities)}
	END;

	AddOwnsTrackAsset(aDataPrepEntities,aOwnsTrackAsset) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aOwnsTrackAsset : TrackAsset &
		(aOwnsTrackAsset |-> aDataPrepEntities) /: A_ownsTrackAsset_dataPrepEntities &
		A_ownsTrackAsset_dataPrepEntities[{aOwnsTrackAsset}] = {}
		
	THEN 
		A_ownsTrackAsset_dataPrepEntities := A_ownsTrackAsset_dataPrepEntities \/ {(aOwnsTrackAsset |-> aDataPrepEntities)}
	END;

	AddKnowsAssetAndState(aDataPrepEntities,aKnowsAssetAndState) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aKnowsAssetAndState : AssetAndState &
		(aKnowsAssetAndState |-> aDataPrepEntities) /: A_KnowsAssetAndState_dataPrepEntities &
		A_KnowsAssetAndState_dataPrepEntities[{aKnowsAssetAndState}] = {}
		
	THEN 
		A_KnowsAssetAndState_dataPrepEntities := A_KnowsAssetAndState_dataPrepEntities \/ {(aKnowsAssetAndState |-> aDataPrepEntities)}
	END;

	AddUsesPositionedRelation(aTopology,aUsesPositionedRelation) = 
	PRE	aTopology : Topology &
		aUsesPositionedRelation : PositionedRelation &
		(aUsesPositionedRelation |-> aTopology) /: A_usesPositionedRelation_topology &
		A_usesPositionedRelation_topology[{aUsesPositionedRelation}] = {}
		
	THEN 
		A_usesPositionedRelation_topology := A_usesPositionedRelation_topology \/ {(aUsesPositionedRelation |-> aTopology)}
	END;

	AddUsesNetElement(aTopology,aUsesNetElement) = 
	PRE	aTopology : Topology &
		aUsesNetElement : PositioningNetElement &
		(aUsesNetElement |-> aTopology) /: A_usesNetElement_topology &
		A_usesNetElement_topology[{aUsesNetElement}] = {}
		
	THEN 
		A_usesNetElement_topology := A_usesNetElement_topology \/ {(aUsesNetElement |-> aTopology)}
	END;

	RemoveTrains(aETCSModel,aTrains) = 
	PRE	aETCSModel : ETCSModel &
		aTrains : Train &
		(aTrains |-> aETCSModel) : ListOfTrains
		
	THEN 
		ListOfTrains := ListOfTrains - {(aTrains |-> aETCSModel)}
	END;

	RemoveEulynxModel(aETCSModel,aEulynxModel) = 
	PRE	aETCSModel : ETCSModel &
		aEulynxModel : DocumentRoot &
		(aETCSModel |-> aEulynxModel) : EulynxModels
		
	THEN 
		EulynxModels := EulynxModels - {(aETCSModel |-> aEulynxModel)}
	END;

	RemoveOccupyFront(aTrain,aOccupyFront) = 
	PRE	aTrain : Train &
		aOccupyFront : VirtualSubSection &
		(aTrain |-> aOccupyFront) : TrainFront
		
	THEN 
		TrainFront := TrainFront - {(aTrain |-> aOccupyFront)}
	END;

	RemoveOccupyRear(aTrain,aOccupyRear) = 
	PRE	aTrain : Train &
		aOccupyRear : VirtualSubSection &
		(aTrain |-> aOccupyRear) : TrainRear
		
	THEN 
		TrainRear := TrainRear - {(aTrain |-> aOccupyRear)}
	END;

	RemoveLocationRear(aTrain,aLocationRear) = 
	PRE	aTrain : Train &
		aLocationRear : VirtualSubSection &
		(aTrain |-> aLocationRear) : TrainRearLocation
		
	THEN 
		TrainRearLocation := TrainRearLocation - {(aTrain |-> aLocationRear)}
	END;

	RemoveLocationFront(aTrain,aLocationFront) = 
	PRE	aTrain : Train &
		aLocationFront : VirtualSubSection &
		(aTrain |-> aLocationFront) : TrainFrontLocation
		
	THEN 
		TrainFrontLocation := TrainFrontLocation - {(aTrain |-> aLocationFront)}
	END;

	RemoveFrontMA(aTrain,aFrontMA) = 
	PRE	aTrain : Train &
		aFrontMA : VirtualSubSection &
		(aTrain |-> aFrontMA) : frontMA
		
	THEN 
		frontMA := frontMA - {(aTrain |-> aFrontMA)}
	END;

	RemoveRearMA(aTrain,aRearMA) = 
	PRE	aTrain : Train &
		aRearMA : VirtualSubSection &
		(aTrain |-> aRearMA) : rearMA
		
	THEN 
		rearMA := rearMA - {(aTrain |-> aRearMA)}
	END;

	RemoveOccupiesTdsSection(aVehiclePassageDetector,aOccupiesTdsSection) = 
	PRE	aVehiclePassageDetector : VehiclePassageDetector &
		aOccupiesTdsSection : TdsSection &
		(aVehiclePassageDetector |-> aOccupiesTdsSection) : A_occupiesTdsSection_vehiclePassageDetector
		
	THEN 
		A_occupiesTdsSection_vehiclePassageDetector := A_occupiesTdsSection_vehiclePassageDetector - {(aVehiclePassageDetector |-> aOccupiesTdsSection)}
	END;

	RemoveDataPrepEntities(aDocumentRoot,aDataPrepEntities) = 
	PRE	aDocumentRoot : DocumentRoot &
		aDataPrepEntities : DataPrepEntities &
		(aDataPrepEntities |-> aDocumentRoot) : A_dataPrepEntities_documentRoot
		
	THEN 
		A_dataPrepEntities_documentRoot := A_dataPrepEntities_documentRoot - {(aDataPrepEntities |-> aDocumentRoot)}
	END;

	RemoveRsmEntities(aDocumentRoot,aRsmEntities) = 
	PRE	aDocumentRoot : DocumentRoot &
		aRsmEntities : RsmEntities &
		(aRsmEntities |-> aDocumentRoot) : A_rsmEntities_documentRoot
		
	THEN 
		A_rsmEntities_documentRoot := A_rsmEntities_documentRoot - {(aRsmEntities |-> aDocumentRoot)}
	END;

	RemoveOwnsRouteBodyProperty(aDataPrepEntities,aOwnsRouteBodyProperty) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aOwnsRouteBodyProperty : RouteBodyProperty &
		(aOwnsRouteBodyProperty |-> aDataPrepEntities) : A_ownsRouteBodyProperty_dataPrepEntities
		
	THEN 
		A_ownsRouteBodyProperty_dataPrepEntities := A_ownsRouteBodyProperty_dataPrepEntities - {(aOwnsRouteBodyProperty |-> aDataPrepEntities)}
	END;

	RemoveOwnsTrackAsset(aDataPrepEntities,aOwnsTrackAsset) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aOwnsTrackAsset : TrackAsset &
		(aOwnsTrackAsset |-> aDataPrepEntities) : A_ownsTrackAsset_dataPrepEntities
		
	THEN 
		A_ownsTrackAsset_dataPrepEntities := A_ownsTrackAsset_dataPrepEntities - {(aOwnsTrackAsset |-> aDataPrepEntities)}
	END;

	RemoveKnowsAssetAndState(aDataPrepEntities,aKnowsAssetAndState) = 
	PRE	aDataPrepEntities : DataPrepEntities &
		aKnowsAssetAndState : AssetAndState &
		(aKnowsAssetAndState |-> aDataPrepEntities) : A_KnowsAssetAndState_dataPrepEntities
		
	THEN 
		A_KnowsAssetAndState_dataPrepEntities := A_KnowsAssetAndState_dataPrepEntities - {(aKnowsAssetAndState |-> aDataPrepEntities)}
	END;

	RemoveUsesEtcsTopology(aRsmEntities,aUsesEtcsTopology) = 
	PRE	aRsmEntities : RsmEntities &
		aUsesEtcsTopology : Topology &
		(aRsmEntities |-> aUsesEtcsTopology) : EtcsTopologies
		
	THEN 
		EtcsTopologies := EtcsTopologies - {(aRsmEntities |-> aUsesEtcsTopology)}
	END;

	RemoveUsesPositionedRelation(aTopology,aUsesPositionedRelation) = 
	PRE	aTopology : Topology &
		aUsesPositionedRelation : PositionedRelation &
		(aUsesPositionedRelation |-> aTopology) : A_usesPositionedRelation_topology
		
	THEN 
		A_usesPositionedRelation_topology := A_usesPositionedRelation_topology - {(aUsesPositionedRelation |-> aTopology)}
	END;

	RemoveUsesNetElement(aTopology,aUsesNetElement) = 
	PRE	aTopology : Topology &
		aUsesNetElement : PositioningNetElement &
		(aUsesNetElement |-> aTopology) : A_usesNetElement_topology
		
	THEN 
		A_usesNetElement_topology := A_usesNetElement_topology - {(aUsesNetElement |-> aTopology)}
	END;

	result <-- GetSupervisionOfTrain(aETCSModel) = 
	PRE	aETCSModel : ETCSModel &
		aETCSModel : dom(SupervisionOfTrain)
		
	THEN 
		result := SupervisionOfTrain(aETCSModel)
	END;

	result <-- GetTrainConnected(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainConnected)
		
	THEN 
		result := TrainConnected(aTrain)
	END;

	result <-- GetTrainReConnected(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(TrainReConnected)
		
	THEN 
		result := TrainReConnected(aTrain)
	END;

	result <-- GetKindOfTrain(aTrain) = 
	PRE	aTrain : Train &
		aTrain : dom(KindOfTrain)
		
	THEN 
		result := KindOfTrain(aTrain)
	END;

	result <-- GetInVacancyState(aSectionAndVacancy) = 
	PRE	aSectionAndVacancy : SectionAndVacancy &
		aSectionAndVacancy : dom(inVacancyState)
		
	THEN 
		result := inVacancyState(aSectionAndVacancy)
	END;

	SetSupervisionOfTrain(aETCSModel,aSupervisionOfTrain) = 
	PRE	aETCSModel : ETCSModel &
		aSupervisionOfTrain : SupervisionStatus
		
	THEN 
		SupervisionOfTrain := ({aETCSModel} <<| SupervisionOfTrain)  \/ {(aETCSModel |-> aSupervisionOfTrain)}
	END;

	SetTrainConnected(aTrain,aTrainConnected) = 
	PRE	aTrain : Train &
		aTrainConnected : BOOL
		
	THEN 
		TrainConnected := ({aTrain} <<| TrainConnected)  \/ {(aTrain |-> aTrainConnected)}
	END;

	SetTrainReConnected(aTrain,aTrainReConnected) = 
	PRE	aTrain : Train &
		aTrainReConnected : BOOL
		
	THEN 
		TrainReConnected := ({aTrain} <<| TrainReConnected)  \/ {(aTrain |-> aTrainReConnected)}
	END;

	SetInVacancyState(aSectionAndVacancy,aInVacancyState) = 
	PRE	aSectionAndVacancy : SectionAndVacancy &
		aInVacancyState : SectionVacancyTypes
		
	THEN 
		inVacancyState := ({aSectionAndVacancy} <<| inVacancyState)  \/ {(aSectionAndVacancy |-> aInVacancyState)}
	END;

	UnsetSupervisionOfTrain(aETCSModel) = 
	PRE	aETCSModel : ETCSModel
		
	THEN 
		SupervisionOfTrain := {aETCSModel} <<| SupervisionOfTrain
	END;

	UnsetTrainConnected(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainConnected := {aTrain} <<| TrainConnected
	END;

	UnsetTrainReConnected(aTrain) = 
	PRE	aTrain : Train
		
	THEN 
		TrainReConnected := {aTrain} <<| TrainReConnected
	END;

	UnsetInVacancyState(aSectionAndVacancy) = 
	PRE	aSectionAndVacancy : SectionAndVacancy
		
	THEN 
		inVacancyState := {aSectionAndVacancy} <<| inVacancyState
	END;

	RemoveSupervisionOfTrain(aETCSModel,aSupervisionOfTrain) = 
	PRE	aETCSModel : ETCSModel &
		aSupervisionOfTrain : SupervisionStatus &
		{(aETCSModel |-> aSupervisionOfTrain)} <: SupervisionOfTrain
		
	THEN 
		SupervisionOfTrain := SupervisionOfTrain - {(aETCSModel |-> aSupervisionOfTrain)}
	END;

	RemoveTrainConnected(aTrain,aTrainConnected) = 
	PRE	aTrain : Train &
		aTrainConnected : BOOL &
		{(aTrain |-> aTrainConnected)} <: TrainConnected
		
	THEN 
		TrainConnected := TrainConnected - {(aTrain |-> aTrainConnected)}
	END;

	RemoveTrainReConnected(aTrain,aTrainReConnected) = 
	PRE	aTrain : Train &
		aTrainReConnected : BOOL &
		{(aTrain |-> aTrainReConnected)} <: TrainReConnected
		
	THEN 
		TrainReConnected := TrainReConnected - {(aTrain |-> aTrainReConnected)}
	END;

	RemoveInVacancyState(aSectionAndVacancy,aInVacancyState) = 
	PRE	aSectionAndVacancy : SectionAndVacancy &
		aInVacancyState : SectionVacancyTypes &
		{(aSectionAndVacancy |-> aInVacancyState)} <: inVacancyState
		
	THEN 
		inVacancyState := inVacancyState - {(aSectionAndVacancy |-> aInVacancyState)}
	END


END
