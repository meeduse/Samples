
/*
 * This file was generated by Meeduse animator on Monday, January 31, 2022 at 9:48:47 AM CET
 */


MACHINE 
	
	schedularDSL2

DEFINITIONS
	


	END_OF_GENERATED_DEFINITIONS_FOR == schedularDSL2;
	

SETS
	
	StatusEnum = {waitingDSL,readyDSL,activeDSL};
	SCHEDULAR;
	PROCESS

CONSTANTS
	
	SCHEDULAR1

PROPERTIES
	
	SCHEDULAR1 : SCHEDULAR &
	card({SCHEDULAR1}) = 1 &
	SCHEDULAR /= {}

ABSTRACT_VARIABLES
	
	Schedular,
	Process,
	A_process_schedular,
	Number,
	Status

INVARIANT
	
	/*
	 * Start of user code INVARIANT (NOT GENERATED)
	 */
	
	/*
	 * End of user code
	 */
	
	
	Schedular : FIN(SCHEDULAR) &
	Process : FIN(PROCESS) &
	A_process_schedular : Process +-> Schedular &
	Number : Process +-> INTEGER &
	Status : Process +-> StatusEnum

INITIALISATION
	
	Schedular := {SCHEDULAR1} ||
	Process := {} ||
	Number := {} ||
	Status := {} ||
	A_process_schedular := {}

OPERATIONS
	
	/*
	 * Start of user code OPERATIONS (NOT GENERATED)
	 */
	 update(relation)=
	     PRE relation : Process+->StatusEnum
	     THEN 
	         Status:=Status<+relation
	     END ;
	/*
	 * End of user code
	 */
	
	
	schedular_NEW(aSchedular) = 
	PRE	aSchedular : SCHEDULAR &
		aSchedular /: Schedular
		
	THEN 
		Schedular := Schedular \/ {aSchedular}
	END;

	Process_NEW(aProcess) = 
	PRE	aProcess : PROCESS &
		aProcess /: Process
		
	THEN 
		Process := Process \/ {aProcess}
	END;

	schedular_Free(aSchedular) = 
	PRE	aSchedular : Schedular
		
	THEN 
		Schedular := Schedular - {aSchedular} ||
		A_process_schedular := A_process_schedular |>> {aSchedular}
	END;

	Process_Free(aProcess) = 
	PRE	aProcess : Process
		
	THEN 
		Process := Process - {aProcess} ||
		A_process_schedular := {aProcess} <<| A_process_schedular ||
		Number := {aProcess} <<| Number ||
		Status := {aProcess} <<| Status
	END;

	result <-- GetProcess(aSchedular) = 
	PRE	aSchedular : Schedular &
		aSchedular : ran(A_process_schedular)
		
	THEN 
		result := A_process_schedular~[{aSchedular}]
	END;

	SetProcess(aSchedular,theProcess) = 
	PRE	aSchedular : Schedular &
		theProcess : FIN(Process) &
		(theProcess * {aSchedular}) /<: A_process_schedular &
		!added.( added : theProcess => A_process_schedular[{added}] = {})
		
	THEN 
		A_process_schedular := (A_process_schedular |>> {aSchedular}) \/ (theProcess * {aSchedular})
	END;

	UnsetProcess(aSchedular) = 
	PRE	aSchedular : Schedular
		
	THEN 
		A_process_schedular := A_process_schedular |>> {aSchedular}
	END;

	AddProcess(aSchedular,aProcess) = 
	PRE	aSchedular : Schedular &
		aProcess : Process &
		(aProcess |-> aSchedular) /: A_process_schedular &
		A_process_schedular[{aProcess}] = {}
		
	THEN 
		A_process_schedular := A_process_schedular \/ {(aProcess |-> aSchedular)}
	END;

	RemoveProcess(aSchedular,aProcess) = 
	PRE	aSchedular : Schedular &
		aProcess : Process &
		(aProcess |-> aSchedular) : A_process_schedular
		
	THEN 
		A_process_schedular := A_process_schedular - {(aProcess |-> aSchedular)}
	END;

	result <-- GetNumber(aProcess) = 
	PRE	aProcess : Process &
		aProcess : dom(Number)
		
	THEN 
		result := Number(aProcess)
	END;

	result <-- GetStatus(aProcess) = 
	PRE	aProcess : Process &
		aProcess : dom(Status)
		
	THEN 
		result := Status(aProcess)
	END;

	SetNumber(aProcess,aNumber) = 
	PRE	aProcess : Process &
		aNumber : INTEGER
		
	THEN 
		Number := ({aProcess} <<| Number)  \/ {(aProcess |-> aNumber)}
	END;

	SetStatus(aProcess,aStatus) = 
	PRE	aProcess : Process &
		aStatus : StatusEnum
		
	THEN 
		Status := ({aProcess} <<| Status)  \/ {(aProcess |-> aStatus)}
	END;

	UnsetNumber(aProcess) = 
	PRE	aProcess : Process
		
	THEN 
		Number := {aProcess} <<| Number
	END;

	UnsetStatus(aProcess) = 
	PRE	aProcess : Process
		
	THEN 
		Status := {aProcess} <<| Status
	END;

	RemoveNumber(aProcess,aNumber) = 
	PRE	aProcess : Process &
		aNumber : INTEGER &
		{(aProcess |-> aNumber)} <: Number
		
	THEN 
		Number := Number - {(aProcess |-> aNumber)}
	END;

	RemoveStatus(aProcess,aStatus) = 
	PRE	aProcess : Process &
		aStatus : StatusEnum &
		{(aProcess |-> aStatus)} <: Status
		
	THEN 
		Status := Status - {(aProcess |-> aStatus)}
	END


END
