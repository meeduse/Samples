technique RefinementInclusion
header {
	REFINEMENT linkage_lift
	B{
	REFINES existing_lift
	INCLUDES liftM
}B
}


applyPattern MyTemplate.EclassToMachine(Lift)

applyPattern MyTemplate.EnumTypeToBoolean(
	B{Door(linked_lift)}B  door_open Closed Open
)

applyPattern MyTemplate.EnumTypeToBoolean(
	B{Direction(linked_lift)}B direction_up Down Up
)
applyPattern MyTemplate.EClassToBSet(
	Floor 
	B{groundf..topf}B 
	B{!(f1,f2).(f1 : Floor & f2 : Floor & (f1|->f2) : up_down => mapping(f2) = mapping(f1) + 1)}B
)
applyPattern MyTemplate.SingleValuedERefToSetElement(
	B{linked floors(liftPosition(linked_lift))}B 
	cur_floor
)

applyPattern MyTemplate.MultileValuedERefToSet(
	B{Linked_floors[selectedFloors[{linked_lift}]]}B call_buttons

)





BClause INITIALISATION
B{   cur_floor := (groundf) ;
	door_open := FALSE ;
	call_buttons := ({}) ;
	direction_up := TRUE;
    SetDirection(linked_lift ,Up);
	SetDoor(linked_lift,Closed);
	UnsetSelectedFloors(linked_lift)
}B

BClause OPERATIONS
B{ 
 move_up = 
 SELECT 
     door_open = FALSE 
     & cur_floor < topf 
     & direction_up = TRUE 
     & # cc.((cc : INTEGER) & ((cc : INTEGER) & (cc > cur_floor) & (cc : call_buttons))) &
            (cur_floor /: call_buttons)
THEN
    cur_floor := ((cur_floor)+(1));
    SetLiftPosition(linked_lift ,linked_floors~(cur_floor)) 
 END ;
 
 move_down = SELECT door_open = FALSE & cur_floor > groundf & (direction_up = FALSE) &
       # cu.((cu : INTEGER) & ((cu : INTEGER) & (cu < cur_floor) & (cu : call_buttons))) &
      (cur_floor /: call_buttons) THEN
   cur_floor := ((cur_floor)-(1));  
	SetLiftPosition(linked_lift ,linked_floors~(cur_floor)) 
 END ;
 reverse_lift_up = SELECT direction_up = FALSE & door_open = FALSE &
   # cc.((cc : INTEGER) & ((cc : INTEGER) & (cc > cur_floor) & (cc : call_buttons))) & 
   ! ll.((ll : INTEGER) => (((ll : INTEGER) & (ll <= cur_floor) & (ll >= groundf)) => (ll /: call_buttons))) THEN
   direction_up := TRUE;
    SetDirection(linked_lift ,Up)
 END ;
 reverse_lift_down = SELECT direction_up = TRUE & door_open = FALSE & 
  # cd.(cd : INTEGER & ((cd : INTEGER) & (cd < cur_floor) & (cd : call_buttons))) & 
  ! uu.(uu : INTEGER => (((uu : INTEGER) & (uu >= cur_floor) & (uu <= topf)) => (uu /: call_buttons))) THEN
  direction_up := FALSE;
    SetDirection(linked_lift, Down)
 END ;
 open_door = SELECT door_open = FALSE & (cur_floor : call_buttons) THEN
    door_open := TRUE;
    SetDoor(linked_lift, Open)
 END ;
 close_door = SELECT door_open = TRUE THEN
    door_open := FALSE || call_buttons := ((call_buttons)-({cur_floor}));
    SetDoor(linked_lift,Closed) ;
    RemoveSelectedFloors(linked_lift, linked_floors~(cur_floor))
 END ;
 push_call_button(fl) = PRE (fl : (groundf .. topf)) & (fl /: call_buttons) THEN 
     call_buttons := ((call_buttons)\/({fl}));
    AddSelectedFloors(linked_lift, linked_floors~(fl))
 END
 
 }B

